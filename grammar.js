/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[2,3],$V2=[1,25],$V3=[1,29],$V4=[1,7],$V5=[1,51],$V6=[1,53],$V7=[1,48],$V8=[1,10],$V9=[1,11],$Va=[1,12],$Vb=[1,18],$Vc=[1,19],$Vd=[1,22],$Ve=[1,23],$Vf=[1,24],$Vg=[1,26],$Vh=[1,17],$Vi=[1,27],$Vj=[1,28],$Vk=[1,52],$Vl=[1,45],$Vm=[1,43],$Vn=[1,44],$Vo=[1,49],$Vp=[1,50],$Vq=[1,54],$Vr=[2,5,7,8,12,13,14,23,30,33,34,43,44,46,47,48,49,50,57,58,62,93,98,99,110,111,113],$Vs=[2,25],$Vt=[2,24],$Vu=[2,5,7,8,12,13,14,23,27,30,32,33,34,43,44,46,47,48,49,50,57,58,62,65,66,93,98,99,110,111,113],$Vv=[1,73],$Vw=[7,16,20,63],$Vx=[7,16,20,21,51,63],$Vy=[7,16,20,21,51,63,69,70],$Vz=[1,83],$VA=[7,16,20,21,51,63,69,70,72],$VB=[1,84],$VC=[7,16,20,21,51,63,69,70,72,74],$VD=[1,85],$VE=[7,16,20,21,51,63,69,70,72,74,76],$VF=[1,86],$VG=[7,16,20,21,51,63,69,70,72,74,76,78],$VH=[1,87],$VI=[1,88],$VJ=[7,16,20,21,51,63,69,70,72,74,76,78,80,82],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[7,16,20,21,51,63,69,70,72,74,76,78,80,82,83,85,86,87],$VP=[1,93],$VQ=[1,94],$VR=[7,16,20,21,51,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90],$VS=[1,95],$VT=[1,96],$VU=[7,16,20,21,51,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93],$VV=[1,97],$VW=[1,98],$VX=[1,99],$VY=[7,16,20,21,51,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97],$VZ=[1,100],$V_=[1,101],$V$=[1,102],$V01=[7,16,20,21,51,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97,100,101,102],$V11=[1,106],$V21=[1,107],$V31=[7,10,16,20,21,51,62,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97,100,101,102],$V41=[7,10,16,20,21,27,51,62,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97,100,101,102],$V51=[7,16,20,21,27,51,62,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97,100,101,102],$V61=[1,109],$V71=[1,110],$V81=[2,5,7,8,12,13,14,23,27,30,33,34,43,44,46,47,48,49,50,57,58,62,65,66,93,98,99,110,111,113],$V91=[2,78],$Va1=[7,16],$Vb1=[2,68],$Vc1=[1,124],$Vd1=[1,159],$Ve1=[1,160],$Vf1=[1,161],$Vg1=[1,162],$Vh1=[1,163],$Vi1=[1,166],$Vj1=[1,176],$Vk1=[1,182],$Vl1=[1,185],$Vm1=[1,186],$Vn1=[1,187],$Vo1=[1,188],$Vp1=[7,16,20],$Vq1=[2,5,7,8,10,12,13,14,23,27,30,32,33,34,43,44,46,47,48,49,50,57,58,62,65,66,93,98,99,110,111,113],$Vr1=[2,22],$Vs1=[1,208],$Vt1=[16,20],$Vu1=[1,217],$Vv1=[7,16,20,51],$Vw1=[2,18],$Vx1=[7,8,16,20,27,51,62],$Vy1=[1,224],$Vz1=[2,57],$VA1=[2,83],$VB1=[1,256],$VC1=[1,257],$VD1=[7,16,20,51,62],$VE1=[20,27];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"decls":4,"EOF":5,"decl":6,"SEMICOLON":7,"L_CURLY":8,"func_decl":9,"DOT":10,"stm_list":11,"FUNCTION":12,"NAME":13,"L_PAR":14,"params":15,"R_PAR":16,"return_type":17,"block_decl":18,"param":19,"COMMA":20,"COLON":21,"type":22,"NUMBER":23,"STRING":24,"BOOLEAN":25,"VOID":26,"R_CURLY":27,"stm":28,"var_decl":29,"IF":30,"expr":31,"ELSE":32,"WHILE":33,"FOR":34,"arg":35,"scope":36,"OF":37,"IN":38,"object":39,"object_decl":40,"normal_stm":41,"then_stm":42,"DO":43,"SWITCH":44,"case_stm":45,"BREAK":46,"CONTINUE":47,"RETURN":48,"CONSOLE_LOG":49,"TYPE":50,"ASSIGN":51,"atr_list":52,"atr":53,"value":54,"var_element":55,"var_list":56,"LET":57,"CONST":58,"dec_type":59,"dec_assign":60,"array":61,"L_SQUARE":62,"R_SQUARE":63,"op_if":64,"CASE":65,"DEFAULT":66,"op_assign":67,"op_or":68,"QUESTION":69,"OR":70,"op_and":71,"AND":72,"op_bin_or":73,"BIN_OR":74,"op_bin_xor":75,"BIN_XOR":76,"op_bin_and":77,"BIN_AND":78,"op_equate":79,"EQUAL":80,"op_compare":81,"NOT_EQUAL":82,"LESS":83,"op_shift":84,"GREATER":85,"LESS_EQUAL":86,"GREATER_EQUAL":87,"L_SHIFT":88,"op_add":89,"R_SHIFT":90,"PLUS":91,"op_mult":92,"MINUS":93,"MULTIPLY":94,"op_unary":95,"DIVIDE":96,"REMAINDER":97,"NOT":98,"BIN_NOT":99,"INCREMENT":100,"DECREMENT":101,"POWER":102,"op_pointer":103,"string_function":104,"LENGTH":105,"CHARAT":106,"TOLOWERCASE":107,"TOUPPERCASE":108,"CONCAT":109,"DECIMAL":110,"STRINGVAL":111,"access_list":112,"NEW":113,"ARRAY":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",8:"L_CURLY",10:"DOT",12:"FUNCTION",13:"NAME",14:"L_PAR",16:"R_PAR",20:"COMMA",21:"COLON",23:"NUMBER",24:"STRING",25:"BOOLEAN",26:"VOID",27:"R_CURLY",30:"IF",32:"ELSE",33:"WHILE",34:"FOR",37:"OF",38:"IN",43:"DO",44:"SWITCH",46:"BREAK",47:"CONTINUE",48:"RETURN",49:"CONSOLE_LOG",50:"TYPE",51:"ASSIGN",57:"LET",58:"CONST",62:"L_SQUARE",63:"R_SQUARE",65:"CASE",66:"DEFAULT",69:"QUESTION",70:"OR",72:"AND",74:"BIN_OR",76:"BIN_XOR",78:"BIN_AND",80:"EQUAL",82:"NOT_EQUAL",83:"LESS",85:"GREATER",86:"LESS_EQUAL",87:"GREATER_EQUAL",88:"L_SHIFT",90:"R_SHIFT",91:"PLUS",93:"MINUS",94:"MULTIPLY",96:"DIVIDE",97:"REMAINDER",98:"NOT",99:"BIN_NOT",100:"INCREMENT",101:"DECREMENT",102:"POWER",105:"LENGTH",106:"CHARAT",107:"TOLOWERCASE",108:"TOUPPERCASE",109:"CONCAT",110:"DECIMAL",111:"STRINGVAL",113:"NEW",114:"ARRAY"},
productions_: [0,[3,2],[4,2],[4,0],[4,2],[4,2],[4,1],[6,4],[6,1],[9,7],[9,6],[9,6],[9,5],[15,3],[15,1],[19,2],[19,1],[17,2],[22,1],[22,1],[22,1],[22,1],[18,3],[11,2],[11,0],[28,1],[28,2],[28,7],[28,5],[28,5],[28,9],[28,8],[28,8],[28,1],[28,1],[28,1],[42,7],[42,5],[42,5],[42,9],[42,8],[42,8],[42,1],[41,7],[41,7],[41,1],[41,2],[41,2],[41,2],[41,3],[41,2],[41,1],[41,1],[41,5],[40,7],[52,3],[52,1],[52,0],[53,3],[53,3],[53,3],[39,9],[39,7],[29,3],[36,1],[36,1],[55,3],[56,3],[56,0],[59,3],[61,3],[61,2],[61,3],[61,0],[60,2],[60,0],[35,1],[35,1],[35,0],[45,7],[45,5],[45,5],[45,3],[45,0],[31,3],[31,1],[67,3],[67,1],[64,5],[64,1],[68,3],[68,1],[71,3],[71,1],[73,3],[73,1],[75,3],[75,1],[77,3],[77,1],[79,3],[79,3],[79,1],[81,3],[81,3],[81,3],[81,3],[81,1],[84,3],[84,3],[84,1],[89,3],[89,3],[89,1],[92,3],[92,3],[92,3],[92,1],[95,2],[95,2],[95,2],[95,2],[95,2],[95,3],[95,1],[103,3],[103,4],[103,1],[104,1],[104,4],[104,3],[104,3],[104,4],[54,1],[54,1],[54,3],[54,1],[54,3],[54,1],[54,4],[54,3],[54,3],[54,2],[54,3],[54,3],[54,5],[112,3],[112,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:

		let decls1 = [$$[$0-1]];
		if($$[$0] != null)
		{
			if(Array.isArray($$[$0]))
			{
				$$[$0].forEach(element => decls1.push(element));
			}
			else
			{
				decls1.push($$[$0]);
			}
			
		}
		this.$ = decls1;
	
break;
case 3: case 24: case 57: case 68: case 73: case 75: case 78: case 83:

		this.$ = null;
	
break;
case 4:

		syntaxErrors.push(new Error('Token no esperado: ' + yytext + '. Recuperando con ;', this._$.first_line, this._$.first_column));
		//console.log('Token no esperado: ' + yytext + '. Recuperando con ;', this._$.first_line, this._$.first_column);
	
break;
case 5:

		syntaxErrors.push(new Error('Token no esperado: ' + yytext + '. Recuperando con }', this._$.first_line, this._$.first_column));
		//console.log('Token no esperado: ' + yytext + '. Recuperando con }', this._$.first_line, this._$.first_column);
	
break;
case 6:

		syntaxErrors.push(new Error('Token no esperado: ' + yytext + '.', this._$.first_line, this._$.first_column));
		//console.log('Token no esperado: ' + yytext + '.', this._$.first_line, this._$.first_column);
	
break;
case 7:

		this.$ = $$[$0-3];
	
break;
case 8: case 17: case 18: case 19: case 20: case 21: case 25: case 33: case 34: case 35: case 42: case 45: case 52: case 56: case 64: case 65: case 74: case 76: case 77: case 87: case 89: case 91: case 93: case 95: case 97: case 99: case 102: case 107: case 110: case 113: case 117: case 124: case 127:

		this.$ = $$[$0];
	
break;
case 9:

		let func_decl_name1 = $$[$0-5].toLowerCase();
		this.$ =  create_function($$[$0-1], func_decl_name1, $$[$0-3], $$[$0]);
	
break;
case 10:

		let func_decl_name2 = $$[$0-4].toLowerCase();
		this.$ = create_function(null, func_decl_name2, $$[$0-2], $$[$0]);
	
break;
case 11:

		let func_decl_name3 = $$[$0-4].toLowerCase();
		this.$ = create_function($$[$0-1], func_decl_name3, null, $$[$0]);
	
break;
case 12:

		let func_decl_name4 = $$[$0-3].toLowerCase();
		this.$ = create_function(null, func_decl_name4, null, $$[$0]);
	
break;
case 13:

		let paramsList = [$$[$0-2]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => paramsList.push(element));
		}
		this.$ = paramsList;
	
break;
case 14:

		this.$ = [$$[$0]];
	
break;
case 15:

		let param1 = {
			model: 'Parameter',
			id: $$[$0-1].toLowerCase(),
			type: $$[$0]
		};
		this.$ = param1;
	
break;
case 16:

		let param2 = {
			model: 'Parameter',
			id: $$[$0].toLowerCase(),
			type: null
		}; 
		this.$ = param2;
	
break;
case 22: case 26: case 70: case 143:

		this.$ = $$[$0-1];
	
break;
case 23:

		let stmList = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => stmList.push(element));
		}
		this.$ = stmList;
	
break;
case 27: case 36:

		this.$ = create_ifelse($$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 28:

		this.$ =  create_if($$[$0-2], $$[$0]);
	
break;
case 29: case 38:

		this.$ = create_while($$[$0-2], $$[$0]);
	
break;
case 30: case 39:

		this.$ = create_for($$[$0-6], $$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 31: case 40:

		this.$ =  create_forof($$[$0-4].toLowerCase(), $$[$0-2], $$[$0]);
	
break;
case 32: case 41:

		this.$ =  create_forin($$[$0-4].toLowerCase(), $$[$0-2], $$[$0]);
	
break;
case 37:

		this.$ = create_if($$[$0-2], $$[$0]);
	
break;
case 43:

		this.$ = create_dowhile($$[$0-2], $$[$0-5]);
	
break;
case 44:

		this.$ = create_switch($$[$0-4], $$[$0-1]);
	
break;
case 46:

		// does nothing
		this.$ = $$[$0-1];
	
break;
case 47:

		this.$ = create_break();
	
break;
case 48:

		this.$ =  create_continue();
	
break;
case 49:

		this.$ = create_return($$[$0-1]);
	
break;
case 50:

		// return with no expression(2)
		this.$ = create_return('null');
	
break;
case 51:

		// does nothing
	
break;
case 53:

		this.$ = create_consolelog($$[$0-2]);
	
break;
case 54:

		this.$ = create_objectdeclaration($$[$0-5].toLowerCase(), $$[$0-2]);
	
break;
case 55:

		let atrlist1 = [];
		if($$[$0] != null)
		{
			if(Array.isArray($$[$0]))
			{
				atrlist1.push($$[$0-2]);
				$$[$0].forEach(e =>{
					atrlist1.push(e);
				});
				this.$ = atrlist1;
			}
			else
			{
				this.$ = [$$[$0-2], $$[$0]];
			}
		}
		else
		{
			this.$ = $$[$0-2];
		}
	
break;
case 58:

		let atr1 = {
			id: $$[$0-2].toLowerCase(),
			value: create_variable($$[$0].toLowerCase())
		};
		this.$ = atr1;
	
break;
case 59:

		let atr2 = {
			id: $$[$0-2].toLowerCase(),
			value: $$[$0].toLowerCase()
		};
		this.$ = atr2;
	
break;
case 60:

		let atr3 = {
			id: $$[$0-2].toLowerCase(),
			value: $$[$0]
		};
		this.$ = atr3;
	
break;
case 61:

		this.$ = create_object($$[$0-7].toLowerCase(), $$[$0-5].toLowerCase(), $$[$0-2]);
	
break;
case 62:

		this.$ = create_object($$[$0-5].toLowerCase(), 'null', $$[$0-2]);
	
break;
case 63:

		let varList = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => varList.push(element));
		}
		this.$ = create_declaration($$[$0-2], varList);
	
break;
case 66:

		let element = {
			model: 'VarElement',
			id: $$[$0-2].toLowerCase(),
			type: $$[$0-1] == null? null : $$[$0-1].type,
			array: $$[$0-1] == null? null : $$[$0-1].array,
			value: $$[$0]
		};
		this.$ = element;
	
break;
case 67:

		let a = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => a.push(element));
			this.$ = a;
		}
		else
		{
			this.$ = a;
		}
	
break;
case 69:

		let t = {
			type: $$[$0-1],
			array: $$[$0]
		};
		this.$ = t;
	
break;
case 71:

		this.$ = '[]';
	
break;
case 72:

		if($$[$0-2] == null)
		{
			this.$ = '[]';
		}
		else 
		{
			let sbList = $$[$0-2];
			sbList += '[]';
			this.$ = sbList;
		}
	
break;
case 79:

		let c1 = create_case($$[$0-5], $$[$0-2]);
		let cases1 = [c1];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => {
				cases1.push(element);
			});
		}
		this.$ = cases1;
	
break;
case 80:

		let c2 = create_case($$[$0-3], $$[$0-1]);
		let cases2 = [c2];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => {
				cases2.push(element);
			});
		}
		this.$ = cases2;
	
break;
case 81:

		let defString1 = create_string('default');
		this.$ = [create_case(defString1, $$[$0-1])];
	
break;
case 82:

		let defString2 = create_string('default');
		this.$ = [create_case(defString2, $$[$0])];
	
break;
case 84:

		if($$[$0-2].model == 'Expression')
		{
			//create array with [expr, op_assign]
			let e = create_expression_element($$[$0]);
			let arr = [$$[$0-2], e];
			this.$ = arr;
		}
		else
		{
			// add a new expression element to the list
			this.$.push(create_expression_element($$[$0]));
		}
	
break;
case 85:

		this.$ = create_expression_element($$[$0]);
	
break;
case 86:

		this.$ = create_assignoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 88:

		this.$ = create_ternaryoperation($$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 90: case 92:

		this.$ = create_logicaloperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 94: case 96: case 98:

		this.$ = create_bitwiseoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 100: case 101: case 103: case 104: case 105: case 106:

		this.$ = create_relationaloperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 108: case 109:

		this.$ = create_shiftoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 111: case 112: case 114: case 115: case 116:

		this.$ = create_arithmeticoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 118: case 119: case 122:

		this.$ = create_unaryoperation($$[$0], $$[$0-1]);
	
break;
case 120:

		// RANDOM COMMENT
		this.$ = create_unaryoperation($$[$0-1], '++');
	
break;
case 121:

		this.$ = create_unaryoperation($$[$0-1], '--');
	
break;
case 123:

		this.$ = create_unaryoperation(create_power($$[$0-2],$$[$0]), $$[$0-1]);
	
break;
case 125:

		// array . push ( op_pointer ) ;
		// array . pop ( ) ;
		// array . length ;
		this.$ = null;
	
break;
case 126:

		//array access
		let arrayList = [];
		let ArrayAccess = 
		{
			model: 'ArrayAccess',
			id: $$[$0-3],
			index: $$[$0-1],
		};
		this.$ = ArrayAccess;
	
break;
case 128:

		this.$ = {
			type: 'StringLength',
		};
	
break;
case 129:

		this.$ = {
			type: 'StringCharAt',
			index: $$[$0-1],		
		};
	
break;
case 130:

		this.$ = {
			type: 'StringToLower',
		};
	
break;
case 131:

		this.$ = {
			type: 'StringToUpper',
		};
	
break;
case 132:

		this.$ = {
			type: 'StringConcat',
			value: $$[$0-1],
		};
	
break;
case 133: case 134:

		this.$ = create_number($$[$0]);
	
break;
case 135:

		let s3 = $$[$0-2].replace(/\"/g, "");
		let s4 = s3.replace(/\'/g, "");

		if($$[$0].type == 'StringLength')
		{
			this.$ = create_stringlength(s4, 'String');
		}
		else if($$[$0].type == 'StringCharAt')
		{
			this.$ = create_stringcharat(s4, 'String', $$[$0].index);
		}
		else if($$[$0].type == 'StringToLower')
		{
			this.$ = create_stringtolower(s4, 'String');
		}
		else if($$[$0].type == 'StringToUpper')
		{
			this.$ = create_stringtoupper(s4, 'String');
		}
		else if($$[$0].type == 'StringConcat')
		{
			this.$ = create_stringconcat(s4, $$[$0].value, 'String');
		}
	
break;
case 136:

		/*let s = $$[$0].replace(/\"/g, "");
		let s2 = s.replace(/\'/g, "");
		this.$ = create_string(s2);*/
		let s2 = $$[$0].slice(1, -1);
		this.$ = create_string(s2);
	
break;
case 137:

		let nameDotFunction = $$[$0-2].toLowerCase();
		if($$[$0].type == 'StringLength')
		{
			this.$ = create_stringlength(nameDotFunction, 'Variable');
		}
		else if($$[$0].type == 'StringCharAt')
		{
			this.$ = create_stringcharat(nameDotFunction, 'Variable', $$[$0].index);
		}
		else if($$[$0].type == 'StringToLower')
		{
			this.$ = create_stringtolower(nameDotFunction, 'Variable');
		}
		else if($$[$0].type == 'StringToUpper')
		{
			this.$ = create_stringtoupper(nameDotFunction, 'Variable');
		}
		else if($$[$0].type == 'StringConcat')
		{
			this.$ = create_stringconcat(nameDotFunction, $$[$0].value, 'Variable');
		}
	
break;
case 138:

		let name01 = $$[$0].toLowerCase();
		if(name01 == 'true' || name01 == 'false')
		{
			this.$ = create_boolean(name01);
		}
		else
		{
			this.$ = create_variable(name01);
		}
	
break;
case 139:

		//function call
		
		this.$ = create_call($$[$0-3].toLowerCase(), $$[$0-1]);
	
break;
case 140:

		//function call
		this.$ = create_call($$[$0-2].toLowerCase(), null);
	
break;
case 141:

		//array assignment [elements]
		this.$ = create_arrayassignment($$[$0-1]); //left side array
	
break;
case 142:

		//array assignment []
		this.$ = create_arrayassignment(null); //left side array
	
break;
case 144:

		let name_accesslist = [];
		name_accesslist.push($$[$0-2].toLowerCase());
		$$[$0].forEach(e => {
			name_accesslist.push(e);
		});
		this.$ = create_accesslist(name_accesslist);
	
break;
case 145:

		let newArray = {
			model : 'NewArray',
			expression : $$[$0-1]
		};
		this.$ = newArray;
	
break;
case 146:

		let accesslist1 = [];
		if(Array.isArray($$[$0]))
		{
			$$[$0].forEach(id =>{
				accesslist1.push(id);
			});
		}
		else
		{
			accesslist1.push($$[$0-2].toLowerCase());
			accesslist1.push($$[$0]);
		}
		this.$ = accesslist1;
	
break;
case 147:

		this.$ = $$[$0].toLowerCase();
	
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:$V2,8:$V3,9:5,11:6,12:$V4,13:$V5,14:$V6,18:20,23:$V7,28:8,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{1:[3]},{5:[1,55]},{2:$V0,4:56,5:$V1,6:3,7:$V2,8:$V3,9:5,11:6,12:$V4,13:$V5,14:$V6,18:20,23:$V7,28:8,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{5:[2,6],7:[1,57],8:[1,58]},o($Vr,$Vs,{10:[1,59]}),o($Vr,[2,8]),{13:[1,60]},o([2,5,27,65,66],$Vt,{28:8,29:9,39:13,40:14,41:15,36:16,18:20,31:21,67:30,64:31,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,95:42,103:46,54:47,11:61,9:62,7:$V2,8:$V3,12:$V4,13:$V5,14:$V6,23:$V7,30:$V8,33:$V9,34:$Va,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,57:$Vi,58:$Vj,62:$Vk,93:$Vl,98:$Vm,99:$Vn,110:$Vo,111:$Vp,113:$Vq}),{7:[1,63]},{14:[1,64]},{14:[1,65]},{14:[1,66]},o($Vu,[2,33]),o($Vu,[2,34]),o($Vu,[2,35]),{13:[1,68],55:67},{13:[1,69]},{7:$V2,8:$V3,9:62,12:$V4,13:$V5,14:$V6,18:20,23:$V7,28:70,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{14:[1,71]},o($Vu,[2,45]),{7:[1,72],20:$Vv},{7:[1,74]},{7:[1,75]},{7:[1,77],13:$V5,14:$V6,23:$V7,31:76,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},o($Vu,[2,51]),{14:[1,78]},{13:[2,64]},{13:[2,65]},{7:$V2,8:$V3,9:62,11:79,12:$V4,13:$V5,14:$V6,18:20,23:$V7,27:$Vt,28:8,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},o($Vw,[2,85]),o($Vw,[2,87],{51:[1,80]}),o($Vx,[2,89],{69:[1,81],70:[1,82]}),o($Vy,[2,91],{72:$Vz}),o($VA,[2,93],{74:$VB}),o($VC,[2,95],{76:$VD}),o($VE,[2,97],{78:$VF}),o($VG,[2,99],{80:$VH,82:$VI}),o($VJ,[2,102],{83:$VK,85:$VL,86:$VM,87:$VN}),o($VO,[2,107],{88:$VP,90:$VQ}),o($VR,[2,110],{91:$VS,93:$VT}),o($VU,[2,113],{94:$VV,96:$VW,97:$VX}),o($VY,[2,117],{100:$VZ,101:$V_,102:$V$}),{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,93:$Vl,95:103,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,93:$Vl,95:104,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,93:$Vl,95:105,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},o($V01,[2,124],{10:$V11,62:$V21}),o($V31,[2,127]),o($V31,[2,133]),o($V41,[2,134]),o($V51,[2,136],{10:[1,108]}),o([7,16,20,21,51,62,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97,100,101,102],[2,138],{10:$V61,14:$V71}),{13:$V5,14:$V6,23:$V7,31:111,54:47,62:$Vk,63:[1,112],64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,31:113,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{114:[1,114]},{1:[2,1]},{5:[2,2]},{5:[2,4]},{5:[2,5]},{10:[1,115]},{14:[1,116]},o($V81,[2,23]),o($Vu,$Vs),o($Vu,[2,26]),{13:$V5,14:$V6,23:$V7,31:117,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,31:118,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{7:$V91,13:$V5,14:$V6,23:$V7,29:121,31:122,35:119,36:120,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},o($Va1,$Vb1,{56:123,20:$Vc1}),{21:[1,125],51:[1,126],59:127},{51:[1,128]},{33:[1,129]},{13:$V5,14:$V6,23:$V7,31:130,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},o($Vu,[2,46]),{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,64:31,67:131,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},o($Vu,[2,47]),o($Vu,[2,48]),{7:[1,132],20:$Vv},o($Vu,[2,50]),{13:$V5,14:$V6,23:$V7,31:133,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{27:[1,134]},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,64:31,67:135,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,64:136,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,71:137,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,73:138,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,75:139,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,77:140,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,79:141,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,81:142,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,81:143,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,84:144,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,84:145,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,84:146,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,84:147,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,89:148,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,89:149,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,92:150,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,92:151,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,93:$Vl,95:152,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,93:$Vl,95:153,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,93:$Vl,95:154,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},o($V01,[2,120]),o($V01,[2,121]),{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,103:155,110:$Vo,111:$Vp,113:$Vq},o($VY,[2,118],{100:$VZ,101:$V_,102:$V$}),o($VY,[2,119],{100:$VZ,101:$V_,102:$V$}),o($VY,[2,122],{100:$VZ,101:$V_,102:$V$}),{13:$V5,14:$V6,23:$V7,54:156,62:$Vk,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,31:157,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{104:158,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1},{13:$Vi1,104:164,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,112:165},{13:$V5,14:$V6,16:[1,168],23:$V7,31:167,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{20:$Vv,63:[1,169]},o($V41,[2,142]),{16:[1,170],20:$Vv},{14:[1,171]},{10:[1,172]},{13:$Vj1,15:173,16:[1,174],19:175},{16:[1,177],20:$Vv},{16:[1,178],20:$Vv},{7:[1,179]},{13:[1,180],55:67},o($Va1,[2,76]),o($Va1,[2,77],{20:$Vv}),o($Va1,[2,63]),{13:$Vk1,55:181},{13:[1,183],22:184,23:$Vl1,24:$Vm1,25:$Vn1,26:$Vo1},{8:[1,189]},o($Vp1,[2,75],{60:190,51:[1,191]}),{8:[1,192]},{14:[1,193]},{16:[1,194],20:$Vv},o($Vw,[2,84]),o($Vu,[2,49]),{16:[1,195],20:$Vv},o($Vq1,$Vr1),o($Vw,[2,86]),{21:[1,196]},o($Vy,[2,90],{72:$Vz}),o($VA,[2,92],{74:$VB}),o($VC,[2,94],{76:$VD}),o($VE,[2,96],{78:$VF}),o($VG,[2,98],{80:$VH,82:$VI}),o($VJ,[2,100],{83:$VK,85:$VL,86:$VM,87:$VN}),o($VJ,[2,101],{83:$VK,85:$VL,86:$VM,87:$VN}),o($VO,[2,103],{88:$VP,90:$VQ}),o($VO,[2,104],{88:$VP,90:$VQ}),o($VO,[2,105],{88:$VP,90:$VQ}),o($VO,[2,106],{88:$VP,90:$VQ}),o($VR,[2,108],{91:$VS,93:$VT}),o($VR,[2,109],{91:$VS,93:$VT}),o($VU,[2,111],{94:$VV,96:$VW,97:$VX}),o($VU,[2,112],{94:$VV,96:$VW,97:$VX}),o($VY,[2,114],{100:$VZ,101:$V_,102:$V$}),o($VY,[2,115],{100:$VZ,101:$V_,102:$V$}),o($VY,[2,116],{100:$VZ,101:$V_,102:$V$}),o($V01,[2,123],{10:$V11,62:$V21}),o($V31,[2,125]),{20:$Vv,63:[1,197]},o($V41,[2,135]),o($V41,[2,128]),{14:[1,198]},{14:[1,199]},{14:[1,200]},{14:[1,201]},o($V41,[2,137]),o($V41,[2,144]),o($V51,[2,147],{10:[1,202]}),{16:[1,203],20:$Vv},o($V41,[2,140]),o($V41,[2,141]),o($V41,[2,143]),{13:$V5,14:$V6,23:$V7,31:204,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},o($Vr,[2,7]),{16:[1,205]},{8:$V3,17:206,18:207,21:$Vs1},{16:[2,14],20:[1,209]},o($Vt1,[2,16],{17:210,21:$Vs1}),{7:$V2,8:$V3,9:62,12:$V4,13:$V5,14:$V6,18:20,23:$V7,28:211,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{7:$V2,8:$V3,9:62,12:$V4,13:$V5,14:$V6,18:20,23:$V7,28:212,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{7:$V91,13:$V5,14:$V6,23:$V7,29:121,31:122,35:213,36:214,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{21:$Vu1,37:[1,215],38:[1,216],59:127},o($Va1,$Vb1,{56:218,20:$Vc1}),{21:$Vu1,59:127},{51:[1,219]},o($Vv1,[2,73],{61:220,62:[1,221]}),o([7,8,16,20,51,62],$Vw1),o($Vx1,[2,19]),o($Vx1,[2,20]),o($Vx1,[2,21]),{13:$Vy1,27:$Vz1,52:222,53:223},o($Vp1,[2,66]),{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,64:225,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$Vy1,27:$Vz1,52:226,53:223},{13:$V5,14:$V6,23:$V7,31:227,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{8:[1,228]},{7:[1,229]},{13:$V5,14:$V6,23:$V7,54:47,62:$Vk,64:230,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},o($V31,[2,126]),{13:$V5,14:$V6,23:$V7,31:231,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{16:[1,232]},{16:[1,233]},{13:$V5,14:$V6,23:$V7,31:234,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$Vi1,112:235},o($V41,[2,139]),{16:[1,236],20:$Vv},{8:$V3,17:237,18:238,21:$Vs1},{8:$V3,18:239},o($Vq1,[2,12]),{22:240,23:$Vl1,24:$Vm1,25:$Vn1,26:$Vo1},{13:$Vj1,15:241,19:175},o($Vt1,[2,15]),o($V81,[2,28],{32:[1,242]}),o($Vu,[2,29]),{7:[1,243]},{13:$Vk1,55:67},{13:$V5,14:$V6,23:$V7,31:244,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,23:$V7,31:245,54:47,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{22:184,23:$Vl1,24:$Vm1,25:$Vn1,26:$Vo1},o($Va1,[2,67]),{8:[1,246]},o($Vv1,[2,69],{62:[1,247]}),{13:$V5,14:$V6,23:$V7,31:248,54:47,62:$Vk,63:[1,249],64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{27:[1,250]},{20:[1,251],27:[2,56]},{21:[1,252]},o($Vp1,[2,74]),{27:[1,253]},{16:[1,254],20:$Vv},{27:$VA1,45:255,65:$VB1,66:$VC1},o($Vu,[2,53]),o($Vx,[2,88]),{16:[1,258],20:$Vv},o($V41,[2,130]),o($V41,[2,131]),{16:[1,259],20:$Vv},o($V41,[2,146]),o($V41,[2,145]),{8:$V3,18:260},o($Vq1,[2,10]),o($Vq1,[2,11]),o([8,16,20],[2,17]),{16:[2,13]},{7:$V2,8:$V3,9:62,12:$V4,13:$V5,14:$V6,18:20,23:$V7,28:261,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{13:$V5,14:$V6,16:$V91,23:$V7,29:121,31:122,35:262,36:214,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{16:[1,263],20:$Vv},{16:[1,264],20:$Vv},{13:$Vy1,27:$Vz1,52:265,53:223},{63:[1,266]},{20:$Vv,63:[1,267]},o($VD1,[2,71]),{7:[1,268]},{13:$Vy1,27:$Vz1,52:269,53:223},{13:[1,270],14:$V6,22:271,23:[1,273],24:$Vm1,25:$Vn1,26:$Vo1,54:272,62:$Vk,110:$Vo,111:$Vp,113:$Vq},{7:[1,274]},{7:[1,275]},{27:[1,276]},{13:$V5,14:$V6,23:$V7,54:277,62:$Vk,110:$Vo,111:$Vp,113:$Vq},{21:[1,278]},o($V41,[2,129]),o($V41,[2,132]),o($Vq1,[2,9]),o($Vu,[2,27]),{16:[1,279]},{7:$V2,8:$V3,9:62,12:$V4,13:$V5,14:$V6,18:20,23:$V7,28:280,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{7:$V2,8:$V3,9:62,12:$V4,13:$V5,14:$V6,18:20,23:$V7,28:281,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{27:[1,282]},o($VD1,[2,72]),o($VD1,[2,70]),o($Vu,[2,62]),{27:[2,55]},o($VE1,[2,58],{10:$V61,14:$V71}),o($VE1,[2,59]),o($VE1,[2,60]),o($VE1,$Vw1),o($Vu,[2,54]),o($Vu,[2,43]),o($Vu,[2,44]),{21:[1,283]},{7:$V2,8:[1,284],9:62,11:285,12:$V4,13:$V5,14:$V6,18:20,23:$V7,27:$Vt,28:8,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{7:$V2,8:$V3,9:62,12:$V4,13:$V5,14:$V6,18:20,23:$V7,28:286,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},o($Vu,[2,31]),o($Vu,[2,32]),{7:[1,287]},o([27,65,66],$Vt,{28:8,29:9,39:13,40:14,41:15,36:16,18:20,31:21,67:30,64:31,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,95:42,103:46,54:47,9:62,11:289,7:$V2,8:[1,288],12:$V4,13:$V5,14:$V6,23:$V7,30:$V8,33:$V9,34:$Va,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,57:$Vi,58:$Vj,62:$Vk,93:$Vl,98:$Vm,99:$Vn,110:$Vo,111:$Vp,113:$Vq}),{7:$V2,8:$V3,9:62,11:290,12:$V4,13:$V5,14:$V6,18:20,23:$V7,27:$Vt,28:8,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{27:[2,82]},o($Vu,[2,30]),o($Vu,[2,61]),{7:$V2,8:$V3,9:62,11:291,12:$V4,13:$V5,14:$V6,18:20,23:$V7,27:$Vt,28:8,29:9,30:$V8,31:21,33:$V9,34:$Va,36:16,39:13,40:14,41:15,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:47,57:$Vi,58:$Vj,62:$Vk,64:31,67:30,68:32,71:33,73:34,75:35,77:36,79:37,81:38,84:39,89:40,92:41,93:$Vl,95:42,98:$Vm,99:$Vn,103:46,110:$Vo,111:$Vp,113:$Vq},{27:$VA1,45:292,65:$VB1,66:$VC1},{27:[1,293]},{27:[1,294]},{27:[2,80]},o([7,8,12,13,14,23,30,33,34,43,44,46,47,48,49,50,57,58,62,93,98,99,110,111,113],$Vr1,{27:[2,81]}),o([7,8,12,13,14,23,27,30,33,34,43,44,46,47,48,49,50,57,58,62,93,98,99,110,111,113],$Vr1,{45:295,65:$VB1,66:$VC1}),{27:[2,79]}],
defaultActions: {27:[2,64],28:[2,65],55:[2,1],56:[2,2],57:[2,4],58:[2,5],241:[2,13],269:[2,55],285:[2,82],292:[2,80],295:[2,79]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//MODELS
	var Function = function(returnType, id, parameters, statements)
	{
		this.model = "Function";
		this.returnType = returnType;
		this.id = id;
		this.parameters = parameters;
		this.statements = statements;
	};

	var Declaration = function(scope, idList)
	{
		this.model = "Declaration";
		this.scope = scope;
		this.idList = idList;
	};

	var If = function(condition, statements)
	{
		this.model = "If";
		this.condition = condition;
		this.statements = statements;
	};

	var IfElse = function(condition, statementsTrue, statementsFalse)
	{
		this.model = "IfElse";
		this.condition = condition;
		this.statementsTrue = statementsTrue;
		this.statementsFalse = statementsFalse;
	};

	var While = function(condition, statements)
	{
		this.model = "While";
		this.condition = condition;
		this.statements = statements;
	};

	var DoWhile = function(condition, statements)
	{
		this.model = "DoWhile";
		this.condition = condition;
		this.statements = statements;
	};

	var For = function(arg1, arg2, arg3, statements)
	{
		this.model = "For";
		this.arg1 = arg1;
		this.arg2 = arg2;
		this.arg3 = arg3;
		this.statements = statements;
	};

	var ForOf = function(id, list, statements)
	{
		this.model = 'ForOf';
		this.id = id;
		this.list = list;
		this.statements = statements;
	};

	var ForIn = function(id, list, statements)
	{
		this.model = 'ForIn';
		this.id = id;
		this.list = list;
		this.statements = statements;
	};
 
	var Case = function(value, statements)
	{
		this.model = "Case";
		this.value = value;
		this.statements = statements;
	};

	var Switch = function(condition, cases)
	{
		this.model = "Switch";
		this.condition = condition;
		this.cases = cases;
	};

	var Return = function(value)
	{
		this.model = "Return";
		this.value = value;
	};

	var Break = function()
	{
		this.model = "Break"
	};

	var Continue = function()
	{
		this.model = "Continue"
	};

	var GraficarTS = function()
	{
		this.model = "GraficarTS";
	};

	var ConsoleLog = function(param)
	{
		this.model = "ConsoleLog";
		this.param = param;
	};

	var PreOperation = function(value, operator)
	{
		this.model = "PreOperation";
		this.operator = operator;
		this.value = value;
	};

	var Power = function(value1, value2)
	{
		this.model = "Power";
		this.value1 = value1;
		this.value2 = value2;
	};

	var  UnaryOperation = function(value, operator)
	{
		this.model = "UnaryOperation";
		this.value = value;
		this.operator = operator;
	};

	var ArithmeticOperation = function(value1, value2, operator)
	{
		this.model = "ArithmeticOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var ShiftOperation = function(value1, value2, operator)
	{
		this.model = "ShiftOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var RelationalOperation = function(value1, value2, operator)
	{
		this.model ="RelationalOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var LogicalOperation = function(value1, value2, operator)
	{
		this.model ="LogicalOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var BitwiseOperation = function(value1, value2, operator)
	{
		this.model ="BitwiseOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var TernaryOperation = function(value1, value2, value3)
	{
		this.model ="TernaryOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.value3 = value3;
	};
	
	var AssignOperation = function(value1, value2, operator)
	{
		this.model ='AssignOperation';
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var Expression = function(exp)
	{
		this.model = 'Expression';
		this.expression = exp;
	};

	var Variable = function(id)
	{
		this.model = 'Variable';
		this.id = id;
	};

	var Number = function(value)
	{
		this.model = 'Number';
		this.value = value;
	};

	var String = function(value)
	{
		this.model = 'String';
		this.value = value;
	};

	var Boolean = function(value)
	{
		this.model = 'Boolean';
		this.value = value;
	};

	var Call = function(id, parameters)
	{
		this.model = 'Call';
		this.id = id;
		this.parameters = parameters;
	};

	var Push = function(arr, expression)
	{
		this.model = 'Push';
		this.value1 = arr;
		this.value2 = expression;
	};

	var Pop = function(value)
	{
		this.model = 'Pop';
		this.value = value;
	};

	var Length = function(value)
	{
		this.model = 'Length';
		this.value = value;
	};

	var ArrayAssignment = function(expr)
	{
		this.model = 'ArrayAssignment';
		this.value = expr;
	};

	var StringLength = function(str, type)
	{
		this.model = 'StringLength',
		this.value = str;
		this.type = type;
	};

	var StringCharAt = function(str, type, index)
	{
		this.model = 'StringCharAt',
		this.value = str;
		this.type = type;
		this.index = index;
	};

	var StringToLower = function(str, type)
	{
		this.model = 'StringToLower',
		this.value = str;
		this.type = type;
	};

	var StringToUpper = function(str, type)
	{
		this.model = 'StringToUpper',
		this.value = str;
		this.type = type;
	};

	var StringConcat = function(str1, str2, type)
	{
		this.model = 'StringConcat',
		this.value1 = str1;
		this.value2 = str2;
		this.type = type;
	};

	var AccessList = function(arr)
	{
		this.model = 'AccessList';
		this.list = arr;
	}

	var ObjectDeclaration = function(id, atr)
	{
		this.model = 'ObjectDeclaration';
		this.id = id;
		this.attributes = atr;
	};

	var Objectt = function(id, typ, atr)
	{
		this.model = 'Object';
		this.id = id;
		this.type = typ;
		this.attributes = atr;
	};

	// FUNCTIONS

	function create_function(returnType, id, params, stms)
	{
		let f = new Function(returnType, id, params, stms);
		return f;
	}
	
	function create_declaration(scp, idList)
	{
		let d = new Declaration(scp, idList);
		return d;
	}

	function create_if(cond, stms)
	{
		let i = new If(cond, stms);
		return i;
	}

	function create_ifelse(cond, stms_true, stms_false)
	{
		let ie = new IfElse(cond, stms_true, stms_false);
		return ie;
	}

	function create_while(cond, stms)
	{
		let w = new While(cond, stms);
		return w;
	}

	function create_dowhile(cond, stms)
	{
		let dw = new DoWhile(cond, stms);
		return dw;
	}

	function create_for(arg1, arg2, arg3, stms)
	{
		let f = new For(arg1, arg2, arg3, stms);
		return f;
	}

	function create_forof(id, list, stms)
	{
		let f = new ForOf(id, list, stms);
		return f;
	}

	function create_forin(id, list, stms)
	{
		let f = new ForIn(id, list, stms);
		return f;
	}

	function create_case(val, stms)
	{
		let c = new Case(val, stms);
		return c;
	}

	function create_switch(cond, css)
	{
		let s = new Switch(cond, css);
		return s;
	}

	function create_return(val)
	{
		let r = new Return(val);
		return r;
	}

	function create_break()
	{
		let b = new Break();
		return b;
	}

	function create_continue()
	{
		let c = new Continue();
		return c;
	}

	function create_graficarTS()
	{
		let g = new GraficarTS();
		return g;
	}

	function create_consolelog(p)
	{
		let c = new ConsoleLog(p);
		return c;
	}

	function create_push(arr, exp)
	{
		let p = new Push(arr, exp);
		return p;
	}

	function create_pop(arr)
	{
		let p = new Pop(arr);
		return p;
	}
	
	function create_length(arr)
	{
		let l = new Length(arr);
		return l;
	}

	function create_arrayassignment(arr)
	{
		let a = new ArrayAssignment(arr);
		return a;
	}

	function create_preoperation(val, op)
	{
		let a = new PreOperation(val, op);
		return a;
	}
	function create_power(val1, val2)
	{
		let p = new Power(val1, val2);
		return p;
	}
	function create_unaryoperation(val, op)
	{
		let u = new UnaryOperation(val, op);
		return u;
	}
	function create_arithmeticoperation(val1, val2, op)
	{
		let a = new ArithmeticOperation(val1, val2, op);
		return a;
	}
	function create_shiftoperation(val1, val2, op)
	{
		let s = new ShiftOperation(val1, val2, op);
		return s;
	}
	function create_relationaloperation(val1, val2, op)
	{
		let r = new RelationalOperation(val1, val2, op);
		return r;
	}
	function create_logicaloperation(val1, val2, op)
	{
		let l = new LogicalOperation(val1, val2, op);
		return l;
	}
	function create_bitwiseoperation(val1, val2, op)
	{
		let b = new BitwiseOperation(val1, val2, op);
		return b;
	}
	function create_ternaryoperation(val1, val2, val3)
	{
		let t = new TernaryOperation(val1, val2, val3);
		return t;
	}
	function create_assignoperation(val1, val2, op)
	{
		let a = new AssignOperation(val1, val2, op);
		return a;
	}

	function create_expression_element(exp)
	{
		let e = new Expression(exp);
		return e;
	}

	function create_number(value)
	{
		let n = new Number(value);
		return n;
	}

	function create_string(value)
	{
		let s = new String(value);
		return s;
	}

	function create_variable(id)
	{
		let v = new Variable(id);
		return v;
	}

	function create_call(id, params)
	{
		let c = new Call(id, params);
		return c;
	}

	function create_boolean(val)
	{
		let b = new Boolean(val);
		return b;
	}

	function create_stringlength(str, type)
	{
		let s = new StringLength(str, type);
		return s;
	}

	function create_stringcharat(str, type, index)
	{
		let s = new StringCharAt(str, type, index);
		return s;
	}

	function create_stringtolower(str, type)
	{
		let s = new StringToLower(str, type);
		return s;
	}

	function create_stringtoupper(str, type)
	{
		let s = new StringToUpper(str, type);
		return s;
	}

	function create_stringconcat(str1, str2, type)
	{
		let s = new StringConcat(str1, str2, type);
		return s;
	}

	function create_accesslist(arr)
	{
		let l = new AccessList(arr);
		return l;
	}

	function create_objectdeclaration(id, atrs)
	{
		let o = new ObjectDeclaration(id, atrs);
		return o;
	}

	function create_object(id, tp, atrs)
	{
		let o = new Objectt(id, tp, atrs);
		return o;
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 7;
break;
case 4:return 20;
break;
case 5:return 21;
break;
case 6:return 10;
break;
case 7:return 14;
break;
case 8:return 16;
break;
case 9:return 62;
break;
case 10:return 63;
break;
case 11:return 8;
break;
case 12:return 27;
break;
case 13:return 100;
break;
case 14:return 101;
break;
case 15:return 102;
break;
case 16:return 91;
break;
case 17:return 93;
break;
case 18:return 94;
break;
case 19:return 96;
break;
case 20:return 97;
break;
case 21:return 90;
break;
case 22:return 88;
break;
case 23:return 86;
break;
case 24:return 87;
break;
case 25:return 83;
break;
case 26:return 85;
break;
case 27:return 82;
break;
case 28:return 72;
break;
case 29:return 70;
break;
case 30:return 98;
break;
case 31:return 78;
break;
case 32:return 74;
break;
case 33:return 99;
break;
case 34:return 76;
break;
case 35:return 30;
break;
case 36:return 32;
break;
case 37:return 44;
break;
case 38:return 65;
break;
case 39:return 66;
break;
case 40:return 46;
break;
case 41:return 47;
break;
case 42:return 48;
break;
case 43:return 33;
break;
case 44:return 43;
break;
case 45:return 34;
break;
case 46:return 38;
break;
case 47:return 37;
break;
case 48:return 49;
break;
case 49:return 69;
break;
case 50:return 80;
break;
case 51:return 51;
break;
case 52:return 23;
break;
case 53:return 24;
break;
case 54:return 25;
break;
case 55:return 26;
break;
case 56:return 105;
break;
case 57:return 57;
break;
case 58:return 58;
break;
case 59:return 12;
break;
case 60:return 106;
break;
case 61:return 107;
break;
case 62:return 108;
break;
case 63:return 109;
break;
case 64:return 113;
break;
case 65:return 114;
break;
case 66:return 50;
break;
case 67:return 110;
break;
case 68:return 'INTEGER';
break;
case 69:return 111;
break;
case 70:return	'NAME';
break;
case 71:return 5;
break;
case 72:
							lexicalErrors.push(new Error('Error lexico en el token: '+ yy_.yytext+'.', yy_.yylloc.first_line, yy_.yylloc.first_column));
						
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:~)/i,/^(?:\^)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:console\.log\b)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:=)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:function\b)/i,/^(?:charat\b)/i,/^(?:tolowercase\b)/i,/^(?:touppercase\b)/i,/^(?:concat\b)/i,/^(?:new\b)/i,/^(?:array\b)/i,/^(?:type\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:((").*?("))|((').*?(')))/i,/^(?:[a-zA-Z_][a-aA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}