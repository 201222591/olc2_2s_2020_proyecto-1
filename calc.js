/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,4],$V1=[1,7],$V2=[1,50],$V3=[1,52],$V4=[1,47],$V5=[1,49],$V6=[1,28],$V7=[1,22],$V8=[1,10],$V9=[1,11],$Va=[1,12],$Vb=[1,25],$Vc=[1,15],$Vd=[1,16],$Ve=[1,19],$Vf=[1,20],$Vg=[1,21],$Vh=[1,23],$Vi=[1,24],$Vj=[1,26],$Vk=[1,27],$Vl=[1,51],$Vm=[1,44],$Vn=[1,42],$Vo=[1,43],$Vp=[1,48],$Vq=[2,5,10,11,12,21,22,25,29,30,33,34,36,41,42,44,45,46,47,48,52,53,57,90,95,96,100],$Vr=[2,31],$Vs=[2,30],$Vt=[1,60],$Vu=[2,5,10,11,12,21,22,25,26,29,30,32,33,34,36,41,42,44,45,46,47,48,52,53,57,61,63,90,95,96,100],$Vv=[1,67],$Vw=[1,66],$Vx=[1,71],$Vy=[1,75],$Vz=[2,11],$VA=[2,63],$VB=[14,18,29,58],$VC=[14,18,19,29,58,59],$VD=[14,18,19,29,58,59,66,67],$VE=[1,82],$VF=[14,18,19,29,58,59,66,67,69],$VG=[1,83],$VH=[14,18,19,29,58,59,66,67,69,71],$VI=[1,84],$VJ=[14,18,19,29,58,59,66,67,69,71,73],$VK=[1,85],$VL=[14,18,19,29,58,59,66,67,69,71,73,75],$VM=[1,86],$VN=[1,87],$VO=[14,18,19,29,58,59,66,67,69,71,73,75,77,79],$VP=[1,88],$VQ=[1,89],$VR=[1,90],$VS=[1,91],$VT=[14,18,19,29,58,59,66,67,69,71,73,75,77,79,80,82,83,84],$VU=[1,92],$VV=[1,93],$VW=[14,18,19,29,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87],$VX=[1,94],$VY=[1,95],$VZ=[14,18,19,29,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90],$V_=[1,96],$V$=[1,97],$V01=[1,98],$V11=[14,18,19,29,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94],$V21=[1,99],$V31=[1,100],$V41=[1,102],$V51=[14,18,19,29,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94,97,98],$V61=[8,14,18,19,29,57,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94,97,98],$V71=[2,5,10,11,12,21,22,25,26,29,30,33,34,36,41,42,44,45,46,47,48,52,53,57,61,63,90,95,96,100],$V81=[1,120],$V91=[2,80],$Va1=[14,29],$Vb1=[2,70],$Vc1=[1,122],$Vd1=[14,18,29,59],$Ve1=[14,18,29],$Vf1=[1,128],$Vg1=[8,14,18,29,57,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94,97,98],$Vh1=[2,89],$Vi1=[1,135],$Vj1=[1,147],$Vk1=[1,150],$Vl1=[1,155],$Vm1=[1,158],$Vn1=[1,164],$Vo1=[1,177],$Vp1=[1,178],$Vq1=[1,191],$Vr1=[1,187],$Vs1=[1,188],$Vt1=[1,189],$Vu1=[1,190],$Vv1=[2,5,8,10,11,12,21,22,25,26,29,30,32,33,34,36,41,42,44,45,46,47,48,52,53,57,61,63,90,95,96,100],$Vw1=[2,27],$Vx1=[1,205],$Vy1=[1,204],$Vz1=[14,18],$VA1=[2,14,18,25,29,57,59],$VB1=[1,227],$VC1=[2,21],$VD1=[1,240],$VE1=[2,85],$VF1=[1,238],$VG1=[1,239];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"decls":4,"EOF":5,"decl":6,"func_decl":7,"DOT":8,"stm_list":9,"FUNCTION":10,"NAME":11,"L_PAR":12,"params":13,"R_PAR":14,"return_type":15,"block_decl":16,"param":17,"COMMA":18,"COLON":19,"type":20,"NUMBER":21,"STRING":22,"BOOLEAN":23,"VOID":24,"L_CURLY":25,"R_CURLY":26,"stm":27,"var_decl":28,"SEMICOLON":29,"IF":30,"expr":31,"ELSE":32,"WHILE":33,"FOR":34,"arg":35,"VAR":36,"OF":37,"IN":38,"normal_stm":39,"then_stm":40,"DO":41,"SWITCH":42,"case_stm":43,"BREAK":44,"CONTINUE":45,"RETURN":46,"CONSOLE_LOG":47,"GRAFICAR_TS":48,"scope":49,"var_element":50,"var_list":51,"LET":52,"CONST":53,"dec_type":54,"dec_assign":55,"array":56,"L_SQUARE":57,"R_SQUARE":58,"ASSIGN":59,"op_if":60,"CASE":61,"value":62,"DEFAULT":63,"op_assign":64,"op_or":65,"QUESTION":66,"OR":67,"op_and":68,"AND":69,"op_bin_or":70,"BIN_OR":71,"op_bin_xor":72,"BIN_XOR":73,"op_bin_and":74,"BIN_AND":75,"op_equate":76,"EQUAL":77,"op_compare":78,"NOT_EQUAL":79,"LESS":80,"op_shift":81,"GREATER":82,"LESS_EQUAL":83,"GREATER_EQUAL":84,"L_SHIFT":85,"op_add":86,"R_SHIFT":87,"PLUS":88,"op_mult":89,"MINUS":90,"MULTIPLY":91,"op_unary":92,"DIVIDE":93,"REMAINDER":94,"NOT":95,"BIN_NOT":96,"INCREMENT":97,"DECREMENT":98,"op_pointer":99,"DECIMAL":100,"PUSH":101,"POP":102,"LENGTH":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"DOT",10:"FUNCTION",11:"NAME",12:"L_PAR",14:"R_PAR",18:"COMMA",19:"COLON",21:"NUMBER",22:"STRING",23:"BOOLEAN",24:"VOID",25:"L_CURLY",26:"R_CURLY",29:"SEMICOLON",30:"IF",32:"ELSE",33:"WHILE",34:"FOR",36:"VAR",37:"OF",38:"IN",41:"DO",42:"SWITCH",44:"BREAK",45:"CONTINUE",46:"RETURN",47:"CONSOLE_LOG",48:"GRAFICAR_TS",52:"LET",53:"CONST",57:"L_SQUARE",58:"R_SQUARE",59:"ASSIGN",61:"CASE",63:"DEFAULT",66:"QUESTION",67:"OR",69:"AND",71:"BIN_OR",73:"BIN_XOR",75:"BIN_AND",77:"EQUAL",79:"NOT_EQUAL",80:"LESS",82:"GREATER",83:"LESS_EQUAL",84:"GREATER_EQUAL",85:"L_SHIFT",87:"R_SHIFT",88:"PLUS",90:"MINUS",91:"MULTIPLY",93:"DIVIDE",94:"REMAINDER",95:"NOT",96:"BIN_NOT",97:"INCREMENT",98:"DECREMENT",100:"DECIMAL",101:"PUSH",102:"POP",103:"LENGTH"},
productions_: [0,[3,2],[3,1],[4,2],[4,0],[4,1],[6,4],[6,1],[6,1],[7,7],[7,6],[7,6],[7,5],[7,1],[13,3],[13,1],[13,1],[17,2],[17,1],[17,1],[15,2],[15,1],[20,1],[20,1],[20,1],[20,1],[20,1],[16,3],[16,1],[9,2],[9,0],[27,1],[27,2],[27,7],[27,5],[27,5],[27,9],[27,8],[27,8],[27,1],[27,1],[40,7],[40,5],[40,5],[40,9],[40,8],[40,8],[40,1],[40,1],[39,7],[39,7],[39,1],[39,2],[39,2],[39,2],[39,3],[39,1],[39,1],[39,5],[39,4],[39,1],[28,3],[28,1],[49,1],[49,1],[49,1],[49,1],[50,3],[50,1],[51,3],[51,0],[54,3],[54,0],[56,3],[56,2],[56,0],[55,2],[55,0],[35,1],[35,1],[35,0],[43,7],[43,5],[43,5],[43,3],[43,0],[43,1],[31,3],[31,1],[31,1],[64,3],[64,1],[64,1],[60,5],[60,1],[60,1],[65,3],[65,1],[65,1],[68,3],[68,1],[68,1],[70,3],[70,1],[70,1],[72,3],[72,1],[72,1],[74,3],[74,1],[74,1],[76,3],[76,3],[76,1],[76,1],[78,3],[78,3],[78,3],[78,3],[78,1],[78,1],[81,3],[81,3],[81,1],[81,1],[86,3],[86,3],[86,1],[86,1],[89,3],[89,3],[89,3],[89,1],[89,1],[92,2],[92,2],[92,2],[92,2],[92,2],[92,1],[92,1],[99,3],[99,4],[99,1],[99,1],[62,1],[62,1],[62,1],[62,1],[62,4],[62,3],[62,3],[62,2],[62,3],[62,6],[62,5],[62,3],[62,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2: case 5:

		syntaxErrors.push(new Error('Token no esperado: ' + yytext + '.', this._$.first_line, this._$.first_column));
	
break;
case 3:

		let decls = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => decls.push(element));
		}
		this.$ = decls;
	
break;
case 4: case 30: case 70: case 72: case 75: case 77: case 85:

		this.$ = null;
	
break;
case 6:

		this.$ = $$[$0-3];
	
break;
case 7: case 20: case 22: case 23: case 24: case 25: case 31: case 39: case 47: case 51: case 57: case 63: case 64: case 65: case 76: case 78: case 79: case 91: case 94: case 97: case 100: case 103: case 106: case 109: case 113: case 119: case 123: case 127: case 132: case 139: case 143:

		this.$ = $$[$0];
	
break;
case 8: case 13: case 16: case 19: case 21: case 26: case 28: case 48: case 60: case 62: case 66: case 68: case 86: case 89: case 92: case 95: case 98: case 101: case 104: case 107: case 110: case 114: case 120: case 124: case 128: case 133: case 140: case 144: case 157:

		syntaxErrors.push(new Error('Token no esperado: ', this._$.first_line, this._$.first_column));
	
break;
case 9:

		this.$ =  create_function($$[$0-1], $$[$0-5], $$[$0-3], $$[$0]);
	
break;
case 10:

		this.$ = create_function(null, $$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 11:

		this.$ = create_function($$[$0-1], $$[$0-4], null, $$[$0]);
	
break;
case 12:

		this.$ = create_function(null, $$[$0-3], null, $$[$0]);
	
break;
case 14:

		let paramsList = [$$[$0-2]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => paramsList.push(element));
		}
		this.$ = paramsList;
	
break;
case 15:

		this.$ = [$$[$0]];
	
break;
case 17:

		let param1 = {
			model: 'Parameter',
			id: $$[$0-1],
			type: $$[$0]
		};
		this.$ = param1;
	
break;
case 18:

		let param2 = {
			model: 'Parameter',
			id: $$[$0],
			type: null
		}; 
		this.$ = param2;
	
break;
case 27: case 32: case 73: case 153:

		this.$ = $$[$0-1];
	
break;
case 29:

		let stmList = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => stmList.push(element));
		}
		this.$ = stmList;
	
break;
case 33: case 41:

		this.$ = create_ifelse($$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 34:

		this.$ =  create_if($$[$0-2], $$[$0]);
	
break;
case 35: case 43:

		this.$ = create_while($$[$0-2], $$[$0]);
	
break;
case 36: case 44:

		this.$ = create_for($$[$0-6], $$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 37: case 45:

		this.$ =  create_forof($$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 38: case 46:

		this.$ =  create_forin($$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 40:

		syntaxErrors.push(new Error('Token no esperado: ' + yytext, this._$.first_line, this._$.first_column));
	
break;
case 42:

		this.$ = create_if($$[$0-2], $$[$0]);
	
break;
case 49:

		this.$ = create_dowhile($$[$0-2], $$[$0-5]);
	
break;
case 50:

		this.$ = create_switch($$[$0-4], $$[$0-1]);
	
break;
case 52:

		// does nothing
		this.$ = $$[$0-1];
	
break;
case 53:

		this.$ = create_break();
	
break;
case 54:

		this.$ =  create_continue();
	
break;
case 55:

		this.$ = create_return($$[$0-1]);
	
break;
case 56:

		// does nothing
	
break;
case 58:

		this.$ = create_consolelog($$[$0-2]);
	
break;
case 59:

		this.$ = create_graficarTS();
	
break;
case 61:

		let varList = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => varList.push(element));
		}
		this.$ = create_declaration($$[$0-2], varList);
	
break;
case 67:

		let element = {
			model: 'VarElement',
			id: $$[$0-2],
			type: $$[$0-1] == null? null : $$[$0-1].type,
			array: $$[$0-1] == null? null : $$[$0-1].array,
			value: $$[$0]
		};
		this.$ = element;
	
break;
case 69:

		let a = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => a.push(element));
			this.$ = a;
		}
		else
		{
			this.$ = a;
		}
	
break;
case 71:

		let t = {
			type: $$[$0-1],
			array: $$[$0]
		};
		this.$ = t;
	
break;
case 74:

		this.$ = '[]';
	
break;
case 81:

		let c1 = create_case($$[$0-5], $$[$0-2]);
		let cases1 = [c1];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => {
				cases1.push(element);
			});
		}
		this.$ = cases1;
	
break;
case 82:

		let c2 = create_case($$[$0-3], $$[$0-1]);
		let cases2 = [c2];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => {
				cases2.push(element);
			});
		}
		this.$ = cases2;
	
break;
case 83:

		let defString1 = create_string('default');
		this.$ = [create_case(defString1, $$[$0-1])];
	
break;
case 84:

		let defString2 = create_string('default');
		this.$ = [create_case(defString2, $$[$0])];
	
break;
case 87:

		if($$[$0-2].model == 'Expression')
		{
			//create array with [expr, op_assign]
			let e = create_expression_element($$[$0]);
			let arr = [$$[$0-2], e];
			this.$ = arr;
		}
		else
		{
			// add a new expression element to the list
			this.$.push(create_expression_element($$[$0]));
		}
	
break;
case 88:

		this.$ = create_expression_element($$[$0]);
	
break;
case 90:

		this.$ = create_assignoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 93:

		this.$ = create_ternaryoperation($$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 96: case 99:

		this.$ = create_logicaloperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 102: case 105: case 108:

		this.$ = create_bitwiseoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 111: case 112: case 115: case 116: case 117: case 118:

		this.$ = create_relationaloperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 121: case 122:

		this.$ = create_shiftoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 125: case 126: case 129: case 130: case 131:

		this.$ = create_arithmeticoperation($$[$0-2], $$[$0], $$[$0-1]);
	
break;
case 134: case 135: case 138:

		this.$ = create_unaryoperation($$[$0], $$[$0-1]);
	
break;
case 136:

		// RANDOM COMMENT
		this.$ = create_unaryoperation($$[$0-1], '++');
	
break;
case 137:

		this.$ = create_unaryoperation($$[$0-1], '--');
	
break;
case 141:

		// array . push ( op_pointer ) ;
		// array . pop ( ) ;
		// array . length ;
		this.$ = null;
	
break;
case 142:

		//array access
		let arrayList = [];
		let ArrayAccess = 
		{
			model: 'ArrayAccess',
			id: $$[$0-3],
			index: $$[$0-1],
		};
		this.$ = ArrayAccess;
	
break;
case 145: case 146:

		this.$ = create_number($$[$0]);
	
break;
case 147:

		var s = $$[$0].replace(/\"/g, "");
		var s2 = s.replace(/\'/g, "");
		this.$ = create_string(s2);
	
break;
case 148:

		if($$[$0] == 'true' || $$[$0] == 'false')
		{
			this.$ = create_boolean($$[$0]);
		}
		else
		{
			this.$ = create_variable($$[$0]);
		}
	
break;
case 149:

		//function call
		this.$ = create_call($$[$0-3], $$[$0-1]);
	
break;
case 150:

		//function call
		this.$ = create_call($$[$0-2], null);
	
break;
case 151:

		//array assignment [elements]
		this.$ = create_arrayassignment($$[$0-1]);
	
break;
case 152:

		//array assignment []
		this.$ = create_arrayassignment(null);
	
break;
case 154:

		this.$ = create_push($$[$0-5], $$[$0-1]);
	
break;
case 155:

		this.$ = create_pop($$[$0-4]);
	
break;
case 156:

		this.$ = create_length($$[$0-2]);
	
break;
}
},
table: [{2:[1,3],3:1,4:2,5:$V0,6:4,7:5,9:6,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,27:8,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{1:[3]},{5:[1,53]},o([1,2,5,8,10,11,12,18,21,22,25,29,30,33,34,36,41,42,44,45,46,47,48,52,53,57,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94,95,96,97,98,100],[2,2]),{2:[1,55],4:54,5:$V0,6:4,7:5,9:6,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,27:8,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},o($Vq,$Vr,{8:[1,56]}),o($Vq,[2,7]),{11:[1,57]},o([5,26,61,63],$Vs,{27:8,28:9,39:13,49:14,16:17,31:18,64:29,60:30,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,92:41,99:45,62:46,9:58,7:59,2:$Vt,10:$V1,11:$V2,12:$V3,21:$V4,22:$V5,25:$V6,29:$V7,30:$V8,33:$V9,34:$Va,36:$Vb,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,52:$Vj,53:$Vk,57:$Vl,90:$Vm,95:$Vn,96:$Vo,100:$Vp}),{29:[1,61]},{12:[1,62]},{12:[1,63]},{12:[1,64]},o($Vu,[2,39]),{2:$Vv,11:$Vw,50:65},{2:$Vt,7:59,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,27:68,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{12:[1,69]},o($Vu,[2,51]),{18:$Vx,29:[1,70]},{29:[1,72]},{29:[1,73]},{2:$Vy,11:$V2,12:$V3,21:$V4,22:$V5,31:74,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},o($Vu,[2,56]),{12:[1,76]},{12:[1,77]},o($Vz,$VA),o($Vz,[2,64]),o($Vz,[2,65]),{2:$Vt,7:59,9:78,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,26:$Vs,27:8,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},o($VB,[2,88]),o($VB,[2,91],{59:[1,79]}),o($VC,[2,94],{66:[1,80],67:[1,81]}),o($VD,[2,97],{69:$VE}),o($VF,[2,100],{71:$VG}),o($VH,[2,103],{73:$VI}),o($VJ,[2,106],{75:$VK}),o($VL,[2,109],{77:$VM,79:$VN}),o($VO,[2,113],{80:$VP,82:$VQ,83:$VR,84:$VS}),o($VT,[2,119],{85:$VU,87:$VV}),o($VW,[2,123],{88:$VX,90:$VY}),o($VZ,[2,127],{91:$V_,93:$V$,94:$V01}),o($V11,[2,132],{97:$V21,98:$V31}),{2:$V41,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,90:$Vm,92:101,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$V41,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,90:$Vm,92:103,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$V41,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,90:$Vm,92:104,95:$Vn,96:$Vo,99:45,100:$Vp},o($V51,[2,139],{8:[1,105],57:[1,106]}),o($V61,[2,143]),o($V61,[2,145]),o($V61,[2,146]),o($V61,[2,147]),o([14,18,19,29,57,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94,97,98],[2,148],{8:[1,108],12:[1,107]}),{2:$Vy,11:$V2,12:$V3,21:$V4,22:$V5,31:109,57:$Vl,58:[1,110],60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vy,11:$V2,12:$V3,21:$V4,22:$V5,31:111,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{1:[2,1]},{5:[2,3]},o([2,5,8,10,11,12,18,21,22,25,29,30,33,34,36,41,42,44,45,46,47,48,52,53,57,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94,95,96,97,98,100],[2,5]),{8:[1,112]},{12:[1,113]},o($V71,[2,29]),o($Vu,$Vr),o([2,5,8,10,11,12,18,21,22,25,26,29,30,32,33,34,36,41,42,44,45,46,47,48,52,53,57,59,61,63,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94,95,96,97,98,100],[2,40]),o($Vu,[2,32]),{2:$Vy,11:$V2,12:$V3,21:$V4,22:$V5,31:114,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vy,11:$V2,12:$V3,21:$V4,22:$V5,31:115,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$V81,11:$V2,12:$V3,21:$V4,22:$V5,28:119,29:$V91,31:118,35:116,36:[1,117],49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},o($Va1,$Vb1,{51:121,18:$Vc1}),o($Vd1,[2,72],{54:123,19:[1,124]}),o($Ve1,[2,68]),{33:[1,125]},{2:$Vy,11:$V2,12:$V3,21:$V4,22:$V5,31:126,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},o($Vu,[2,52]),{2:$Vf1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,60:30,62:46,64:127,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},o($Vu,[2,53]),o($Vu,[2,54]),{18:$Vx,29:[1,129]},o($Vg1,$Vh1),{2:$Vy,11:$V2,12:$V3,21:$V4,22:$V5,31:130,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{14:[1,131]},{26:[1,132]},{2:$Vf1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,60:30,62:46,64:133,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vi1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,60:134,62:46,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:[1,137],11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,68:136,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:[1,139],11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,70:138,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:[1,141],11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,72:140,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:[1,143],11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,74:142,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:[1,145],11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,76:144,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vj1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,78:146,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vj1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,78:148,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vk1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,81:149,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vk1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,81:151,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vk1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,81:152,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vk1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,81:153,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vl1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,86:154,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vl1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,86:156,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vm1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,89:157,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vm1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,89:159,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$V41,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,90:$Vm,92:160,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$V41,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,90:$Vm,92:161,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$V41,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:46,90:$Vm,92:162,95:$Vn,96:$Vo,99:45,100:$Vp},o($V51,[2,136]),o($V51,[2,137]),o($V11,[2,134],{97:$V21,98:$V31}),o($V61,[2,140]),o($V11,[2,135],{97:$V21,98:$V31}),o($V11,[2,138],{97:$V21,98:$V31}),{2:$Vn1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:163,100:$Vp},{2:$Vy,11:$V2,12:$V3,21:$V4,22:$V5,31:165,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vy,11:$V2,12:$V3,14:[1,167],21:$V4,22:$V5,31:166,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{101:[1,168],102:[1,169],103:[1,170]},{18:$Vx,58:[1,171]},o($V61,[2,152]),{14:[1,172],18:$Vx},{8:[1,173]},{2:$Vo1,11:$Vp1,13:174,14:[1,175],17:176},{14:[1,179],18:$Vx},{14:[1,180],18:$Vx},{29:[1,181]},{2:$VA,11:[1,182]},o($Va1,[2,78],{18:$Vx}),o($Va1,[2,79]),o([2,8,11,14,18,29,57,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94,97,98],$Vh1),o($Va1,[2,61]),{2:$Vv,11:$Vw,50:183},o($Ve1,[2,77],{55:184,59:[1,185]}),{2:$Vq1,20:186,21:$Vr1,22:$Vs1,23:$Vt1,24:$Vu1},{12:[1,192]},{14:[1,193],18:$Vx},o($VB,[2,87]),o($Vg1,[2,92]),o($Vu,[2,55]),{14:[1,194],18:$Vx},{29:[1,195]},o($Vv1,$Vw1),o($VB,[2,90]),{19:[1,196]},o($V61,[2,95]),o($VD,[2,96],{69:$VE}),o($V61,[2,101]),o($VF,[2,99],{71:$VG}),o($V61,[2,104]),o($VH,[2,102],{73:$VI}),o($V61,[2,107]),o($VJ,[2,105],{75:$VK}),o($V61,[2,110]),o($VL,[2,108],{77:$VM,79:$VN}),o($V61,[2,114]),o($VO,[2,111],{80:$VP,82:$VQ,83:$VR,84:$VS}),o($V61,[2,120]),o($VO,[2,112],{80:$VP,82:$VQ,83:$VR,84:$VS}),o($VT,[2,115],{85:$VU,87:$VV}),o($V61,[2,124]),o($VT,[2,116],{85:$VU,87:$VV}),o($VT,[2,117],{85:$VU,87:$VV}),o($VT,[2,118],{85:$VU,87:$VV}),o($VW,[2,121],{88:$VX,90:$VY}),o($V61,[2,128]),o($VW,[2,122],{88:$VX,90:$VY}),o($VZ,[2,125],{91:$V_,93:$V$,94:$V01}),o($V61,[2,133]),o($VZ,[2,126],{91:$V_,93:$V$,94:$V01}),o($V11,[2,129],{97:$V21,98:$V31}),o($V11,[2,130],{97:$V21,98:$V31}),o($V11,[2,131],{97:$V21,98:$V31}),o($V61,[2,141]),o($V61,[2,157]),{18:$Vx,58:[1,197]},{14:[1,198],18:$Vx},o($V61,[2,150]),{12:[1,199]},{12:[1,200]},o($V61,[2,156]),o($V61,[2,151]),o($V61,[2,153]),o($Vq,[2,6]),{14:[1,201]},{2:$Vx1,15:202,16:203,19:$Vy1,25:$V6},{14:[2,15],18:[1,206]},o($Vz1,[2,16]),o($Vz1,[2,18],{15:207,2:[1,208],19:$Vy1}),{2:$Vt,7:59,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,27:209,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vt,7:59,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,27:210,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$V81,11:$V2,12:$V3,21:$V4,22:$V5,28:119,29:$V91,31:118,35:211,36:$Vb,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{37:[1,212],38:[1,213]},o($Va1,$Vb1,{51:214,18:$Vc1}),o($Ve1,[2,67]),{2:$Vi1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,60:215,62:46,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},o($Vd1,[2,75],{56:216,57:[1,217]}),o($VA1,[2,22]),o($VA1,[2,23]),o($VA1,[2,24]),o($VA1,[2,25]),o($VA1,[2,26]),{2:$Vy,11:$V2,12:$V3,21:$V4,22:$V5,31:218,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{25:[1,219]},{29:[1,220]},o($Vu,[2,59]),{2:$Vi1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,60:221,62:46,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},o($V61,[2,142]),o($V61,[2,149]),{2:$Vy,11:$V2,12:$V3,21:$V4,22:$V5,31:222,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{14:[1,223]},{2:$Vx1,15:224,16:225,19:$Vy1,25:$V6},{2:$VB1,16:226,25:$V6},o($Vv1,[2,12]),{2:$Vq1,20:228,21:$Vr1,22:$Vs1,23:$Vt1,24:$Vu1},o($Vv1,$VC1),{2:$Vo1,11:$Vp1,13:229,17:176},o($Vz1,[2,17]),o($Vz1,$VC1),o($V71,[2,34],{32:[1,230]}),o($Vu,[2,35]),{29:[1,231]},{11:[1,232]},{11:[1,233]},o($Va1,[2,69]),o($Ve1,[2,76]),o($Vd1,[2,71]),{2:$Vy,11:$V2,12:$V3,21:$V4,22:$V5,31:234,57:$Vl,58:[1,235],60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{14:[1,236],18:$Vx},{2:$VD1,26:$VE1,43:237,61:$VF1,63:$VG1},o($Vu,[2,58]),o($VC,[2,93]),{14:[1,241],18:$Vx},o($V61,[2,155]),{2:$VB1,16:242,25:$V6},o($Vv1,[2,10]),o($Vv1,$Vz),o($Vv1,[2,28]),o([2,14,18,25],[2,20]),{14:[2,14]},{2:$Vt,7:59,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,27:243,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$V81,11:$V2,12:$V3,14:$V91,21:$V4,22:$V5,28:119,31:118,35:244,36:$Vb,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{14:[1,245]},{14:[1,246]},{18:$Vx,58:[1,247]},o($Vd1,[2,74]),{29:[1,248]},{26:[1,249]},{2:$Vn1,11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:250,100:$Vp},{19:[1,251]},{26:[2,86]},o($V61,[2,154]),o($Vv1,[2,9]),o($Vu,[2,33]),{14:[1,252]},{2:$Vt,7:59,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,27:253,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vt,7:59,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,27:254,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},o($Vd1,[2,73]),o($Vu,[2,49]),o($Vu,[2,50]),{19:[1,255]},{2:$Vt,7:59,9:257,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:[1,256],26:$Vs,27:8,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$Vt,7:59,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,27:258,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},o($Vu,[2,37]),o($Vu,[2,38]),o([26,61,63],$Vs,{27:8,28:9,39:13,49:14,16:17,31:18,64:29,60:30,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,92:41,99:45,62:46,7:59,9:260,2:$Vt,10:$V1,11:$V2,12:$V3,21:$V4,22:$V5,25:[1,259],29:$V7,30:$V8,33:$V9,34:$Va,36:$Vb,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,52:$Vj,53:$Vk,57:$Vl,90:$Vm,95:$Vn,96:$Vo,100:$Vp}),{2:$Vt,7:59,9:261,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,26:$Vs,27:8,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{26:[2,84]},o($Vu,[2,36]),{2:$Vt,7:59,9:262,10:$V1,11:$V2,12:$V3,16:17,21:$V4,22:$V5,25:$V6,26:$Vs,27:8,28:9,29:$V7,30:$V8,31:18,33:$V9,34:$Va,36:$Vb,39:13,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:14,52:$Vj,53:$Vk,57:$Vl,60:30,62:46,64:29,65:31,68:32,70:33,72:34,74:35,76:36,78:37,81:38,86:39,89:40,90:$Vm,92:41,95:$Vn,96:$Vo,99:45,100:$Vp},{2:$VD1,26:$VE1,43:263,61:$VF1,63:$VG1},{26:[1,264]},{26:[1,265]},{26:[2,82]},o([2,10,11,12,21,22,25,29,30,33,34,36,41,42,44,45,46,47,48,52,53,57,90,95,96,100],$Vw1,{26:[2,83]}),o([10,11,12,21,22,25,26,29,30,33,34,36,41,42,44,45,46,47,48,52,53,57,90,95,96,100],$Vw1,{43:266,2:$VD1,61:$VF1,63:$VG1}),{26:[2,81]}],
defaultActions: {53:[2,1],54:[2,3],229:[2,14],240:[2,86],257:[2,84],263:[2,82],266:[2,81]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//MODELS
	var Function = function(returnType, id, parameters, statements)
	{
		this.model = "Function";
		this.returnType = returnType;
		this.id = id;
		this.parameters = parameters;
		this.statements = statements;
	};

	var Declaration = function(scope, idList)
	{
		this.model = "Declaration";
		this.scope = scope;
		this.idList = idList;
	};

	var If = function(condition, statements)
	{
		this.model = "If";
		this.condition = condition;
		this.statements = statements;
	};

	var IfElse = function(condition, statementsTrue, statementsFalse)
	{
		this.model = "IfElse";
		this.condition = condition;
		this.statementsTrue = statementsTrue;
		this.statementsFalse = statementsFalse;
	};

	var While = function(condition, statements)
	{
		this.model = "While";
		this.condition = condition;
		this.statements = statements;
	};

	var DoWhile = function(condition, statements)
	{
		this.model = "DoWhile";
		this.condition = condition;
		this.statements = statements;
	};

	var For = function(arg1, arg2, arg3, statements)
	{
		this.model = "For";
		this.arg1 = arg1;
		this.arg2 = arg2;
		this.arg3 = arg3;
		this.statements = statements;
	};

	var ForOf = function(id, list, statements)
	{
		this.model = 'ForOf';
		this.id = id;
		this.list = list;
		this.statements = statements;
	};

	var ForIn = function(id, list, statements)
	{
		this.model = 'ForIn';
		this.id = id;
		this.list = list;
		this.statements = statements;
	};
 
	var Case = function(value, statements)
	{
		this.model = "Case";
		this.value = value;
		this.statements = statements;
	};

	var Switch = function(condition, cases)
	{
		this.model = "Switch";
		this.condition = condition;
		this.cases = cases;
	};

	var Return = function(value)
	{
		this.model = "Return";
		this.value = value;
	};

	var Break = function()
	{
		this.model = "Break"
	};

	var Continue = function()
	{
		this.model = "Continue"
	};

	var GraficarTS = function()
	{
		this.model = "GraficarTS";
	};

	var ConsoleLog = function(param)
	{
		this.model = "ConsoleLog";
		this.param = param;
	};

	var PreOperation = function(value, operator)
	{
		this.model = "PreOperation";
		this.operator = operator;
		this.value = value;
	};

	var  UnaryOperation = function(value, operator)
	{
		this.model = "UnaryOperation";
		this.value = value;
		this.operator = operator;
	};

	var ArithmeticOperation = function(value1, value2, operator)
	{
		this.model = "ArithmeticOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var ShiftOperation = function(value1, value2, operator)
	{
		this.model = "ShiftOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var RelationalOperation = function(value1, value2, operator)
	{
		this.model ="RelationalOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var LogicalOperation = function(value1, value2, operator)
	{
		this.model ="LogicalOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var BitwiseOperation = function(value1, value2, operator)
	{
		this.model ="BitwiseOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var TernaryOperation = function(value1, value2, value3)
	{
		this.model ="TernaryOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.value3 = value3;
	};
	
	var AssignOperation = function(value1, value2, operator)
	{
		this.model ='AssignOperation';
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var Expression = function(exp)
	{
		this.model = 'Expression';
		this.expression = exp;
	}

	var Variable = function(id)
	{
		this.model = 'Variable';
		this.id = id;
	};

	var Number = function(value)
	{
		this.model = 'Number';
		this.value = value;
	};

	var String = function(value)
	{
		this.model = 'String';
		this.value = value;
	};

	var Boolean = function(value)
	{
		this.model = 'Boolean';
		this.value = value;
	};

	var Call = function(id, parameters)
	{
		this.model = 'Call';
		this.id = id;
		this.parameters = parameters;
	};

	var Push = function(arr, expression)
	{
		this.model = 'Push';
		this.value1 = arr;
		this.value2 = expression;
	};

	var Pop = function(value)
	{
		this.model = 'Pop';
		this.value = value;
	};

	var Length = function(value)
	{
		this.model = 'Length';
		this.value = value;
	};

	var ArrayAssignment = function(expr)
	{
		this.model = 'ArrayAssignment';
		this.value = expr;
	};

	// FUNCTIONS

	function create_function(returnType, id, params, stms)
	{
		let f = new Function(returnType, id, params, stms);
		return f;
	}
	
	function create_declaration(scp, idList)
	{
		let d = new Declaration(scp, idList);
		return d;
	}

	function create_if(cond, stms)
	{
		let i = new If(cond, stms);
		return i;
	}

	function create_ifelse(cond, stms_true, stms_false)
	{
		let ie = new IfElse(cond, stms_true, stms_false);
		return ie;
	}

	function create_while(cond, stms)
	{
		let w = new While(cond, stms);
		return w;
	}

	function create_dowhile(cond, stms)
	{
		let dw = new DoWhile(cond, stms);
		return dw;
	}

	function create_for(arg1, arg2, arg3, stms)
	{
		let f = new For(arg1, arg2, arg3, stms);
		return f;
	}

	function create_forof(id, list, stms)
	{
		let f = new ForOf(id, list, stms);
		return f;
	}

	function create_forin(id, list, stms)
	{
		let f = new ForIn(id, list, stms);
		return f;
	}

	function create_case(val, stms)
	{
		let c = new Case(val, stms);
		return c;
	}

	function create_switch(cond, css)
	{
		let s = new Switch(cond, css);
		return s;
	}

	function create_return(val)
	{
		let r = new Return(val);
		return r;
	}

	function create_break()
	{
		let b = new Break();
		return b;
	}

	function create_continue()
	{
		let c = new Continue();
		return c;
	}

	function create_graficarTS()
	{
		let g = new GraficarTS();
		return g;
	}

	function create_consolelog(p)
	{
		let c = new ConsoleLog(p);
		return c;
	}

	function create_push(arr, exp)
	{
		let p = new Push(arr, exp);
		return p;
	}

	function create_pop(arr)
	{
		let p = new Pop(arr);
		return p;
	}
	
	function create_length(arr)
	{
		let l = new Length(arr);
		return l;
	}

	function create_arrayassignment(arr)
	{
		let a = new ArrayAssignment(arr);
		return a;
	}

	function create_preoperation(val, op)
	{
		let a = new PreOperation(val, op);
		return a;
	}
	function create_unaryoperation(val, op)
	{
		let u = new UnaryOperation(val, op);
		return u;
	}
	function create_arithmeticoperation(val1, val2, op)
	{
		let a = new ArithmeticOperation(val1, val2, op);
		return a;
	}
	function create_shiftoperation(val1, val2, op)
	{
		let s = new ShiftOperation(val1, val2, op);
		return s;
	}
	function create_relationaloperation(val1, val2, op)
	{
		let r = new RelationalOperation(val1, val2, op);
		return r;
	}
	function create_logicaloperation(val1, val2, op)
	{
		let l = new LogicalOperation(val1, val2, op);
		return l;
	}
	function create_bitwiseoperation(val1, val2, op)
	{
		let b = new BitwiseOperation(val1, val2, op);
		return b;
	}
	function create_ternaryoperation(val1, val2, val3)
	{
		let t = new TernaryOperation(val1, val2, val3);
		return t;
	}
	function create_assignoperation(val1, val2, op)
	{
		let a = new AssignOperation(val1, val2, op);
		return a;
	}

	function create_expression_element(exp)
	{
		let e = new Expression(exp);
		return e;
	}

	function create_number(value)
	{
		let n = new Number(value);
		return n;
	}

	function create_string(value)
	{
		let s = new String(value);
		return s;
	}

	function create_variable(id)
	{
		let v = new Variable(id);
		return v;
	}

	function create_call(id, params)
	{
		let c = new Call(id, params);
		return c;
	}

	function create_boolean(val)
	{
		let b = new Boolean(val);
		return b;
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 29;
break;
case 4:return 18;
break;
case 5:return 19;
break;
case 6:return 8;
break;
case 7:return 12;
break;
case 8:return 14;
break;
case 9:return 57;
break;
case 10:return 58;
break;
case 11:return 25;
break;
case 12:return 26;
break;
case 13:return 97;
break;
case 14:return 98;
break;
case 15:return 88;
break;
case 16:return 90;
break;
case 17:return 91;
break;
case 18:return 93;
break;
case 19:return 94;
break;
case 20:return 87;
break;
case 21:return 85;
break;
case 22:return 83;
break;
case 23:return 84;
break;
case 24:return 80;
break;
case 25:return 82;
break;
case 26:return 79;
break;
case 27:return 69;
break;
case 28:return 67;
break;
case 29:return 95;
break;
case 30:return 75;
break;
case 31:return 71;
break;
case 32:return 96;
break;
case 33:return 73;
break;
case 34:return 30;
break;
case 35:return 32;
break;
case 36:return 42;
break;
case 37:return 61;
break;
case 38:return 63;
break;
case 39:return 44;
break;
case 40:return 45;
break;
case 41:return 46;
break;
case 42:return 33;
break;
case 43:return 41;
break;
case 44:return 34;
break;
case 45:return 38;
break;
case 46:return 37;
break;
case 47:return 47;
break;
case 48:return 48;
break;
case 49:return 66;
break;
case 50:return 77;
break;
case 51:return 59;
break;
case 52:return 21;
break;
case 53:return 22;
break;
case 54:return 23;
break;
case 55:return 24;
break;
case 56:return 'TYPES';
break;
case 57:return 101;
break;
case 58:return 102;
break;
case 59:return 103;
break;
case 60:return 52;
break;
case 61:return 53;
break;
case 62:return 36;
break;
case 63:return 10;
break;
case 64:return 100;
break;
case 65:return 'INTEGER';
break;
case 66:return 22;
break;
case 67:return	'NAME';
break;
case 68:return 5;
break;
case 69:
							lexicalErrors.push(new Error('Error léxico en el token '+ yy_.yytext+'.', yy_.yylloc.first_line, yy_.yylloc.first_column));
							console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
						
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:~)/i,/^(?:\^)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:console\.log\b)/i,/^(?:graficar_ts\b)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:=)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:types\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:length\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:var\b)/i,/^(?:function\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:((").*?("))|((').*?(')))/i,/^(?:[a-zA-Z_][a-aA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calc;
exports.Parser = calc.Parser;
exports.parse = function () { return calc.parse.apply(calc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}