/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,6],$V2=[1,49],$V3=[1,51],$V4=[1,46],$V5=[1,48],$V6=[1,27],$V7=[1,21],$V8=[1,9],$V9=[1,10],$Va=[1,11],$Vb=[1,24],$Vc=[1,14],$Vd=[1,15],$Ve=[1,18],$Vf=[1,19],$Vg=[1,20],$Vh=[1,22],$Vi=[1,23],$Vj=[1,25],$Vk=[1,26],$Vl=[1,50],$Vm=[1,43],$Vn=[1,41],$Vo=[1,42],$Vp=[1,47],$Vq=[5,10,11,12,21,22,25,29,30,33,34,36,41,42,44,45,46,47,48,52,53,57,90,95,96,100],$Vr=[2,22],$Vs=[2,21],$Vt=[5,10,11,12,21,22,25,26,29,30,32,33,34,36,41,42,44,45,46,47,48,52,53,57,61,63,90,95,96,100],$Vu=[1,63],$Vv=[1,67],$Vw=[14,18,29,58],$Vx=[14,18,19,29,58,59],$Vy=[14,18,19,29,58,59,66,67],$Vz=[1,78],$VA=[14,18,19,29,58,59,66,67,69],$VB=[1,79],$VC=[14,18,19,29,58,59,66,67,69,71],$VD=[1,80],$VE=[14,18,19,29,58,59,66,67,69,71,73],$VF=[1,81],$VG=[14,18,19,29,58,59,66,67,69,71,73,75],$VH=[1,82],$VI=[1,83],$VJ=[14,18,19,29,58,59,66,67,69,71,73,75,77,79],$VK=[1,84],$VL=[1,85],$VM=[1,86],$VN=[1,87],$VO=[14,18,19,29,58,59,66,67,69,71,73,75,77,79,80,82,83,84],$VP=[1,88],$VQ=[1,89],$VR=[14,18,19,29,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87],$VS=[1,90],$VT=[1,91],$VU=[14,18,19,29,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90],$VV=[1,92],$VW=[1,93],$VX=[1,94],$VY=[14,18,19,29,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94],$VZ=[1,95],$V_=[1,96],$V$=[14,18,19,29,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94,97,98],$V01=[8,14,18,19,29,57,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94,97,98],$V11=[5,10,11,12,21,22,25,26,29,30,33,34,36,41,42,44,45,46,47,48,52,53,57,61,63,90,95,96,100],$V21=[2,66],$V31=[14,29],$V41=[2,56],$V51=[1,116],$V61=[14,18,29,59],$V71=[1,159],$V81=[14,18,29],$V91=[1,168],$Va1=[1,169],$Vb1=[1,170],$Vc1=[1,171],$Vd1=[5,8,10,11,12,21,22,25,26,29,30,32,33,34,36,41,42,44,45,46,47,48,52,53,57,61,63,90,95,96,100],$Ve1=[2,19],$Vf1=[1,184],$Vg1=[14,18],$Vh1=[14,18,25,29,57,59],$Vi1=[2,71],$Vj1=[1,215],$Vk1=[1,216];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"decls":4,"EOF":5,"decl":6,"func_decl":7,"DOT":8,"stm_list":9,"FUNCTION":10,"NAME":11,"L_PAR":12,"params":13,"R_PAR":14,"return_type":15,"block_decl":16,"param":17,"COMMA":18,"COLON":19,"type":20,"NUMBER":21,"STRING":22,"BOOLEAN":23,"VOID":24,"L_CURLY":25,"R_CURLY":26,"stm":27,"var_decl":28,"SEMICOLON":29,"IF":30,"expr":31,"ELSE":32,"WHILE":33,"FOR":34,"arg":35,"VAR":36,"OF":37,"IN":38,"normal_stm":39,"then_stm":40,"DO":41,"SWITCH":42,"case_stm":43,"BREAK":44,"CONTINUE":45,"RETURN":46,"CONSOLE_LOG":47,"GRAFICAR_TS":48,"scope":49,"var_element":50,"var_list":51,"LET":52,"CONST":53,"dec_type":54,"dec_assign":55,"array":56,"L_SQUARE":57,"R_SQUARE":58,"ASSIGN":59,"op_if":60,"CASE":61,"value":62,"DEFAULT":63,"op_assign":64,"op_or":65,"QUESTION":66,"OR":67,"op_and":68,"AND":69,"op_bin_or":70,"BIN_OR":71,"op_bin_xor":72,"BIN_XOR":73,"op_bin_and":74,"BIN_AND":75,"op_equate":76,"EQUAL":77,"op_compare":78,"NOT_EQUAL":79,"LESS":80,"op_shift":81,"GREATER":82,"LESS_EQUAL":83,"GREATER_EQUAL":84,"L_SHIFT":85,"op_add":86,"R_SHIFT":87,"PLUS":88,"op_mult":89,"MINUS":90,"MULTIPLY":91,"op_unary":92,"DIVIDE":93,"REMAINDER":94,"NOT":95,"BIN_NOT":96,"INCREMENT":97,"DECREMENT":98,"op_pointer":99,"DECIMAL":100,"PUSH":101,"POP":102,"LENGTH":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"DOT",10:"FUNCTION",11:"NAME",12:"L_PAR",14:"R_PAR",18:"COMMA",19:"COLON",21:"NUMBER",22:"STRING",23:"BOOLEAN",24:"VOID",25:"L_CURLY",26:"R_CURLY",29:"SEMICOLON",30:"IF",32:"ELSE",33:"WHILE",34:"FOR",36:"VAR",37:"OF",38:"IN",41:"DO",42:"SWITCH",44:"BREAK",45:"CONTINUE",46:"RETURN",47:"CONSOLE_LOG",48:"GRAFICAR_TS",52:"LET",53:"CONST",57:"L_SQUARE",58:"R_SQUARE",59:"ASSIGN",61:"CASE",63:"DEFAULT",66:"QUESTION",67:"OR",69:"AND",71:"BIN_OR",73:"BIN_XOR",75:"BIN_AND",77:"EQUAL",79:"NOT_EQUAL",80:"LESS",82:"GREATER",83:"LESS_EQUAL",84:"GREATER_EQUAL",85:"L_SHIFT",87:"R_SHIFT",88:"PLUS",90:"MINUS",91:"MULTIPLY",93:"DIVIDE",94:"REMAINDER",95:"NOT",96:"BIN_NOT",97:"INCREMENT",98:"DECREMENT",100:"DECIMAL",101:"PUSH",102:"POP",103:"LENGTH"},
productions_: [0,[3,2],[4,2],[4,0],[6,4],[6,1],[7,7],[7,6],[7,6],[7,5],[13,3],[13,1],[17,2],[17,1],[15,2],[20,1],[20,1],[20,1],[20,1],[16,3],[9,2],[9,0],[27,1],[27,2],[27,7],[27,5],[27,5],[27,9],[27,8],[27,8],[27,1],[40,7],[40,5],[40,5],[40,9],[40,8],[40,8],[40,1],[39,7],[39,7],[39,1],[39,2],[39,2],[39,2],[39,3],[39,2],[39,1],[39,1],[39,5],[39,4],[28,3],[49,1],[49,1],[49,1],[50,3],[51,3],[51,0],[54,3],[54,0],[56,3],[56,2],[56,0],[55,2],[55,0],[35,1],[35,1],[35,0],[43,7],[43,5],[43,5],[43,3],[43,0],[31,3],[31,1],[64,3],[64,1],[60,5],[60,1],[65,3],[65,1],[68,3],[68,1],[70,3],[70,1],[72,3],[72,1],[74,3],[74,1],[76,3],[76,3],[76,1],[78,3],[78,3],[78,3],[78,3],[78,1],[81,3],[81,3],[81,1],[86,3],[86,3],[86,1],[89,3],[89,3],[89,3],[89,1],[92,2],[92,2],[92,2],[92,2],[92,2],[92,1],[99,3],[99,4],[99,1],[62,1],[62,1],[62,1],[62,1],[62,4],[62,3],[62,3],[62,2],[62,3],[62,6],[62,5],[62,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:

		let decls = [$$[$0-1]];
		if($$[$0] != null)
		{
			$$[$0].forEach(element => decls.push(element));
		}
		this.$ = decls;
	
break;
case 3:

		this.$ = null;
	
break;
case 4:

		this.$ = $$[$0-3];
	
break;
case 5:

		this.$ = $$[$0];
	
break;
case 6:

        this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"func_decl\"];'
		dotData += nodeCounter+'->'+$$[$0-6]+';';
		dotData += nodeCounter+'->'+$$[$0-5]+';';
		dotData += nodeCounter+'->'+$$[$0-3]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 7:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"func_decl\"];'
		dotData += nodeCounter+'->'+$$[$0-5]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 8:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"func_decl\"];'
		dotData += nodeCounter+'->'+$$[$0-5]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 9:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"func_decl\"];'
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-3]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 10:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"params\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 11:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"params\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 12:

        this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"param\"];'
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 13:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"param\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 14:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"return_type\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 15: case 16: case 17: case 18:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"type\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 19:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"block_decl\"];'
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter++;
	
break;
case 20:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"stm_list\"];'
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 21: case 56: case 71:

		this.$ = nodeCounter;
		nodeCounter++;
	
break;
case 22: case 30:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"stm\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 23:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"stm\"];'
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter++;
	
break;
case 24:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"stm\"];'
		dotData += nodeCounter+'->'+$$[$0-6]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 25: case 26:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"stm\"];'
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 27:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"stm\"];'
		dotData += nodeCounter+'->'+$$[$0-8]+';';
		dotData += nodeCounter+'->'+$$[$0-6]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 28: case 29:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"stm\"];'
		dotData += nodeCounter+'->'+$$[$0-7]+';';
		dotData += nodeCounter+'->'+$$[$0-5]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 31:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"then_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-6]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 32:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"then_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		dotData += nodeCounter+'->'+$$[$02]+';';
		dotData += nodeCounter+'->'+$$[$04]+';';

		nodeCounter++;
	
break;
case 33:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"then_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 34:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"then_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-8]+';';
		dotData += nodeCounter+'->'+$$[$0-6]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 35: case 36:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"then_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-7]+';';
		dotData += nodeCounter+'->'+$$[$0-5]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 37:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"then_stm\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 38:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"normal_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-6]+';';
		dotData += nodeCounter+'->'+$$[$0-5]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';

		nodeCounter++;
	
break;
case 39:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"normal_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-6]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter++;
	
break;
case 40: case 47:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"normal_stm\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 41: case 42: case 43:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"normal_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		
		nodeCounter++;
	
break;
case 44:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"normal_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		
		nodeCounter++;
	
break;
case 45:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"normal_stm\"];'
		
		nodeCounter++;
	
break;
case 46:

		// does nothing
	
break;
case 48:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"normal_stm\"];'
		dotData += nodeCounter+'->consoleLog;';
		dotData += nodeCounter+'->'+$$[$0-2]+';';

		nodeCounter++;
	
break;
case 49:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"normal_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-3]+';';

		nodeCounter++;
	
break;
case 50:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"var_decl\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 51: case 52: case 53:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"scope\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 54:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"var_element\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 55:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"var_list\"];'
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 57:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"dec_type\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 58: case 61: case 63:

		this.$ = nodeCounter;

		nodeCounter++;
	
break;
case 59:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"array\"];'
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter++;
	
break;
case 60:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"array\"];'		

		nodeCounter++;
	
break;
case 62:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"dec_assign\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 64: case 65:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"arg\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 67:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"case_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-6]+';';
		dotData += nodeCounter+'->'+$$[$0-5]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 68:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"case_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-3]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter++;
	
break;
case 69:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"case_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		
		nodeCounter++;
	
break;
case 70:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"case_stm\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 72:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"expr\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 73:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"expr\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 74:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_assign\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 75:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_assign\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 76:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_ternary\"];'
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 77:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_if\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 78:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_or\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 79:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_or\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		nodeCounter++;
	
break;
case 80:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_and\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 81: case 83: case 85: case 87: case 90: case 111:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_or\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 82:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_bin_or\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 84:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_bin_xor\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 86:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_bin_and\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 88: case 89:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_equate\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 91: case 92: case 93: case 94:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_compare\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 95:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_compare\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 96: case 97:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_shift\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 98:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_shift\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 99: case 100:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_add\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 101:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_add\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 102: case 103: case 104:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_mult\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 105:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_mult\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 106: case 107: case 110:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_unary\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 108:

		// RANDOM COMMENT
		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_unary\"];'
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		
		nodeCounter++;
	
break;
case 109:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_unary\"];'
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		
		nodeCounter++;
	
break;
case 112:

		// array . push ( op_pointer ) ;
		// array . pop ( ) ;
		// array . length ;
		this.$ = null;
	
break;
case 113:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_pointer\"];'
		dotData += nodeCounter+'->'+$$[$0-3]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		
		nodeCounter++;
	
break;
case 114:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_pointer\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 115: case 116: case 117: case 118:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"value\"];'
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
case 119:

		//function call
		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"value\"];'
		dotData += nodeCounter+'->'+$$[$0-3]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		
		nodeCounter++;
	
break;
case 120:

		//function call
		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"value\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		
		nodeCounter++;
	
break;
case 121:

		//array assignment [elements]
		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"value\"];'
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		
		nodeCounter++;
	
break;
case 122:

		//array assignment []
		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"value\"];'
		
		nodeCounter++;
	
break;
case 123:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"value\"];'
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		
		nodeCounter++;
	
break;
case 124:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"value\"];'
		dotData += nodeCounter+'->'+$$[$0-5]+';';
		dotData += nodeCounter+'->'+$$[$0-3]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		
		nodeCounter++;
	
break;
case 125:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"value\"];'
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		
		nodeCounter++;
	
break;
case 126:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"value\"];'
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter++;
	
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,9:5,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,27:7,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{1:[3]},{5:[1,52]},{4:53,5:$V0,6:3,7:4,9:5,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,27:7,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},o($Vq,$Vr,{8:[1,54]}),o($Vq,[2,5]),{11:[1,55]},o([5,26,61,63],$Vs,{27:7,28:8,39:12,49:13,16:16,31:17,64:28,60:29,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,92:40,99:44,62:45,9:56,7:57,10:$V1,11:$V2,12:$V3,21:$V4,22:$V5,25:$V6,29:$V7,30:$V8,33:$V9,34:$Va,36:$Vb,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,52:$Vj,53:$Vk,57:$Vl,90:$Vm,95:$Vn,96:$Vo,100:$Vp}),{29:[1,58]},{12:[1,59]},{12:[1,60]},{12:[1,61]},o($Vt,[2,30]),{11:$Vu,50:62},{7:57,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,27:64,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{12:[1,65]},o($Vt,[2,40]),{18:$Vv,29:[1,66]},{29:[1,68]},{29:[1,69]},{11:$V2,12:$V3,21:$V4,22:$V5,29:[1,71],31:70,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},o($Vt,[2,46]),{12:[1,72]},{12:[1,73]},{11:[2,51]},{11:[2,52]},{11:[2,53]},{7:57,9:74,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,26:$Vs,27:7,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},o($Vw,[2,73]),o($Vw,[2,75],{59:[1,75]}),o($Vx,[2,77],{66:[1,76],67:[1,77]}),o($Vy,[2,79],{69:$Vz}),o($VA,[2,81],{71:$VB}),o($VC,[2,83],{73:$VD}),o($VE,[2,85],{75:$VF}),o($VG,[2,87],{77:$VH,79:$VI}),o($VJ,[2,90],{80:$VK,82:$VL,83:$VM,84:$VN}),o($VO,[2,95],{85:$VP,87:$VQ}),o($VR,[2,98],{88:$VS,90:$VT}),o($VU,[2,101],{91:$VV,93:$VW,94:$VX}),o($VY,[2,105],{97:$VZ,98:$V_}),{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,90:$Vm,92:97,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,90:$Vm,92:98,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,90:$Vm,92:99,95:$Vn,96:$Vo,99:44,100:$Vp},o($V$,[2,111],{8:[1,100],57:[1,101]}),o($V01,[2,114]),o($V01,[2,115]),o($V01,[2,116]),o($V01,[2,117]),o([14,18,19,29,57,58,59,66,67,69,71,73,75,77,79,80,82,83,84,85,87,88,90,91,93,94,97,98],[2,118],{8:[1,103],12:[1,102]}),{11:$V2,12:$V3,21:$V4,22:$V5,31:104,57:$Vl,58:[1,105],60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,31:106,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{1:[2,1]},{5:[2,2]},{8:[1,107]},{12:[1,108]},o($V11,[2,20]),o($Vt,$Vr),o($Vt,[2,23]),{11:$V2,12:$V3,21:$V4,22:$V5,31:109,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,31:110,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,28:114,29:$V21,31:113,35:111,36:[1,112],49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},o($V31,$V41,{51:115,18:$V51}),o($V61,[2,58],{54:117,19:[1,118]}),{33:[1,119]},{11:$V2,12:$V3,21:$V4,22:$V5,31:120,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},o($Vt,[2,41]),{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,60:29,62:45,64:121,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},o($Vt,[2,42]),o($Vt,[2,43]),{18:$Vv,29:[1,122]},o($Vt,[2,45]),{11:$V2,12:$V3,21:$V4,22:$V5,31:123,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{14:[1,124]},{26:[1,125]},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,60:29,62:45,64:126,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,60:127,62:45,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,68:128,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,70:129,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,72:130,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,74:131,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,76:132,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,78:133,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,78:134,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,81:135,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,81:136,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,81:137,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,81:138,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,86:139,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,86:140,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,89:141,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,89:142,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,90:$Vm,92:143,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,90:$Vm,92:144,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:45,90:$Vm,92:145,95:$Vn,96:$Vo,99:44,100:$Vp},o($V$,[2,108]),o($V$,[2,109]),o($VY,[2,106],{97:$VZ,98:$V_}),o($VY,[2,107],{97:$VZ,98:$V_}),o($VY,[2,110],{97:$VZ,98:$V_}),{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:146,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,31:147,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,14:[1,149],21:$V4,22:$V5,31:148,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{101:[1,150],102:[1,151],103:[1,152]},{18:$Vv,58:[1,153]},o($V01,[2,122]),{14:[1,154],18:$Vv},{8:[1,155]},{11:$V71,13:156,14:[1,157],17:158},{14:[1,160],18:$Vv},{14:[1,161],18:$Vv},{29:[1,162]},{11:[1,163]},o($V31,[2,64],{18:$Vv}),o($V31,[2,65]),o($V31,[2,50]),{11:$Vu,50:164},o($V81,[2,63],{55:165,59:[1,166]}),{20:167,21:$V91,22:$Va1,23:$Vb1,24:$Vc1},{12:[1,172]},{14:[1,173],18:$Vv},o($Vw,[2,72]),o($Vt,[2,44]),{14:[1,174],18:$Vv},{29:[1,175]},o($Vd1,$Ve1),o($Vw,[2,74]),{19:[1,176]},o($Vy,[2,78],{69:$Vz}),o($VA,[2,80],{71:$VB}),o($VC,[2,82],{73:$VD}),o($VE,[2,84],{75:$VF}),o($VG,[2,86],{77:$VH,79:$VI}),o($VJ,[2,88],{80:$VK,82:$VL,83:$VM,84:$VN}),o($VJ,[2,89],{80:$VK,82:$VL,83:$VM,84:$VN}),o($VO,[2,91],{85:$VP,87:$VQ}),o($VO,[2,92],{85:$VP,87:$VQ}),o($VO,[2,93],{85:$VP,87:$VQ}),o($VO,[2,94],{85:$VP,87:$VQ}),o($VR,[2,96],{88:$VS,90:$VT}),o($VR,[2,97],{88:$VS,90:$VT}),o($VU,[2,99],{91:$VV,93:$VW,94:$VX}),o($VU,[2,100],{91:$VV,93:$VW,94:$VX}),o($VY,[2,102],{97:$VZ,98:$V_}),o($VY,[2,103],{97:$VZ,98:$V_}),o($VY,[2,104],{97:$VZ,98:$V_}),o($V01,[2,112]),{18:$Vv,58:[1,177]},{14:[1,178],18:$Vv},o($V01,[2,120]),{12:[1,179]},{12:[1,180]},o($V01,[2,126]),o($V01,[2,121]),o($V01,[2,123]),o($Vq,[2,4]),{14:[1,181]},{15:182,16:183,19:$Vf1,25:$V6},{14:[2,11],18:[1,185]},o($Vg1,[2,13],{15:186,19:$Vf1}),{7:57,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,27:187,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{7:57,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,27:188,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,28:114,29:$V21,31:113,35:189,36:$Vb,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{37:[1,190],38:[1,191]},o($V31,$V41,{51:192,18:$V51}),o($V81,[2,54]),{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,60:193,62:45,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},o($V61,[2,61],{56:194,57:[1,195]}),o($Vh1,[2,15]),o($Vh1,[2,16]),o($Vh1,[2,17]),o($Vh1,[2,18]),{11:$V2,12:$V3,21:$V4,22:$V5,31:196,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{25:[1,197]},{29:[1,198]},o($Vt,[2,49]),{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,60:199,62:45,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},o($V01,[2,113]),o($V01,[2,119]),{11:$V2,12:$V3,21:$V4,22:$V5,31:200,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{14:[1,201]},{15:202,16:203,19:$Vf1,25:$V6},{16:204,25:$V6},o($Vd1,[2,9]),{20:205,21:$V91,22:$Va1,23:$Vb1,24:$Vc1},{11:$V71,13:206,17:158},o($Vg1,[2,12]),o($V11,[2,25],{32:[1,207]}),o($Vt,[2,26]),{29:[1,208]},{11:[1,209]},{11:[1,210]},o($V31,[2,55]),o($V81,[2,62]),o($V61,[2,57]),{11:$V2,12:$V3,21:$V4,22:$V5,31:211,57:$Vl,58:[1,212],60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{14:[1,213],18:$Vv},{26:$Vi1,43:214,61:$Vj1,63:$Vk1},o($Vt,[2,48]),o($Vx,[2,76]),{14:[1,217],18:$Vv},o($V01,[2,125]),{16:218,25:$V6},o($Vd1,[2,7]),o($Vd1,[2,8]),o([14,18,25],[2,14]),{14:[2,10]},{7:57,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,27:219,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{11:$V2,12:$V3,14:$V21,21:$V4,22:$V5,28:114,31:113,35:220,36:$Vb,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{14:[1,221]},{14:[1,222]},{18:$Vv,58:[1,223]},o($V61,[2,60]),{29:[1,224]},{26:[1,225]},{11:$V2,12:$V3,21:$V4,22:$V5,57:$Vl,62:226,100:$Vp},{19:[1,227]},o($V01,[2,124]),o($Vd1,[2,6]),o($Vt,[2,24]),{14:[1,228]},{7:57,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,27:229,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{7:57,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,27:230,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},o($V61,[2,59]),o($Vt,[2,38]),o($Vt,[2,39]),{19:[1,231]},{7:57,9:233,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:[1,232],26:$Vs,27:7,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{7:57,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,27:234,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},o($Vt,[2,28]),o($Vt,[2,29]),o([26,61,63],$Vs,{27:7,28:8,39:12,49:13,16:16,31:17,64:28,60:29,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,92:40,99:44,62:45,7:57,9:236,10:$V1,11:$V2,12:$V3,21:$V4,22:$V5,25:[1,235],29:$V7,30:$V8,33:$V9,34:$Va,36:$Vb,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,52:$Vj,53:$Vk,57:$Vl,90:$Vm,95:$Vn,96:$Vo,100:$Vp}),{7:57,9:237,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,26:$Vs,27:7,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{26:[2,70]},o($Vt,[2,27]),{7:57,9:238,10:$V1,11:$V2,12:$V3,16:16,21:$V4,22:$V5,25:$V6,26:$Vs,27:7,28:8,29:$V7,30:$V8,31:17,33:$V9,34:$Va,36:$Vb,39:12,41:$Vc,42:$Vd,44:$Ve,45:$Vf,46:$Vg,47:$Vh,48:$Vi,49:13,52:$Vj,53:$Vk,57:$Vl,60:29,62:45,64:28,65:30,68:31,70:32,72:33,74:34,76:35,78:36,81:37,86:38,89:39,90:$Vm,92:40,95:$Vn,96:$Vo,99:44,100:$Vp},{26:$Vi1,43:239,61:$Vj1,63:$Vk1},{26:[1,240]},{26:[1,241]},{26:[2,68]},o([10,11,12,21,22,25,29,30,33,34,36,41,42,44,45,46,47,48,52,53,57,90,95,96,100],$Ve1,{26:[2,69]}),o([10,11,12,21,22,25,26,29,30,33,34,36,41,42,44,45,46,47,48,52,53,57,90,95,96,100],$Ve1,{43:242,61:$Vj1,63:$Vk1}),{26:[2,67]}],
defaultActions: {24:[2,51],25:[2,52],26:[2,53],52:[2,1],53:[2,2],206:[2,10],233:[2,70],239:[2,68],242:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 29;
break;
case 4:return 18;
break;
case 5:return 19;
break;
case 6:return 8;
break;
case 7:return 12;
break;
case 8:return 14;
break;
case 9:return 57;
break;
case 10:return 58;
break;
case 11:return 25;
break;
case 12:return 26;
break;
case 13:return 97;
break;
case 14:return 98;
break;
case 15:return 88;
break;
case 16:return 90;
break;
case 17:return 91;
break;
case 18:return 93;
break;
case 19:return 94;
break;
case 20:return 87;
break;
case 21:return 85;
break;
case 22:return 83;
break;
case 23:return 84;
break;
case 24:return 80;
break;
case 25:return 82;
break;
case 26:return 79;
break;
case 27:return 69;
break;
case 28:return 67;
break;
case 29:return 95;
break;
case 30:return 75;
break;
case 31:return 71;
break;
case 32:return 96;
break;
case 33:return 73;
break;
case 34:return 30;
break;
case 35:return 32;
break;
case 36:return 42;
break;
case 37:return 61;
break;
case 38:return 63;
break;
case 39:return 44;
break;
case 40:return 45;
break;
case 41:return 46;
break;
case 42:return 33;
break;
case 43:return 41;
break;
case 44:return 34;
break;
case 45:return 38;
break;
case 46:return 37;
break;
case 47:return 47;
break;
case 48:return 48;
break;
case 49:return 66;
break;
case 50:return 77;
break;
case 51:return 59;
break;
case 52:return 21;
break;
case 53:return 22;
break;
case 54:return 23;
break;
case 55:return 24;
break;
case 56:return 'TYPES';
break;
case 57:return 101;
break;
case 58:return 102;
break;
case 59:return 103;
break;
case 60:return 52;
break;
case 61:return 53;
break;
case 62:return 36;
break;
case 63:return 10;
break;
case 64:return 100;
break;
case 65:return 'INTEGER';
break;
case 66:return 22;
break;
case 67:return	'NAME';
break;
case 68:return 5;
break;
case 69: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:~)/i,/^(?:\^)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:console\.log\b)/i,/^(?:graficar_ts\b)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:=)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:types\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:length\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:var\b)/i,/^(?:function\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:((").*?("))|((').*?(')))/i,/^(?:[a-zA-Z_][a-aA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ast;
exports.Parser = ast.Parser;
exports.parse = function () { return ast.parse.apply(ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}