/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,6],$V2=[1,50],$V3=[1,52],$V4=[1,47],$V5=[1,49],$V6=[1,28],$V7=[1,24],$V8=[1,9],$V9=[1,10],$Va=[1,11],$Vb=[1,17],$Vc=[1,18],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[1,25],$Vh=[1,16],$Vi=[1,26],$Vj=[1,27],$Vk=[1,51],$Vl=[1,44],$Vm=[1,42],$Vn=[1,43],$Vo=[1,48],$Vp=[1,53],$Vq=[5,10,11,12,21,22,25,29,30,33,34,43,44,46,47,48,49,50,57,58,62,93,98,99,110,112],$Vr=[2,22],$Vs=[2,21],$Vt=[5,10,11,12,21,22,25,26,29,30,32,33,34,43,44,46,47,48,49,50,57,58,62,65,66,93,98,99,110,112],$Vu=[1,70],$Vv=[14,18,29,63],$Vw=[14,18,19,29,51,63],$Vx=[14,18,19,29,51,63,69,70],$Vy=[1,80],$Vz=[14,18,19,29,51,63,69,70,72],$VA=[1,81],$VB=[14,18,19,29,51,63,69,70,72,74],$VC=[1,82],$VD=[14,18,19,29,51,63,69,70,72,74,76],$VE=[1,83],$VF=[14,18,19,29,51,63,69,70,72,74,76,78],$VG=[1,84],$VH=[1,85],$VI=[14,18,19,29,51,63,69,70,72,74,76,78,80,82],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[1,89],$VN=[14,18,19,29,51,63,69,70,72,74,76,78,80,82,83,85,86,87],$VO=[1,90],$VP=[1,91],$VQ=[14,18,19,29,51,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90],$VR=[1,92],$VS=[1,93],$VT=[14,18,19,29,51,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93],$VU=[1,94],$VV=[1,95],$VW=[1,96],$VX=[14,18,19,29,51,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97],$VY=[1,97],$VZ=[1,98],$V_=[1,99],$V$=[14,18,19,29,51,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97,100,101,102],$V01=[1,103],$V11=[1,104],$V21=[8,14,18,19,29,51,62,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97,100,101,102],$V31=[8,14,18,19,26,29,51,62,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97,100,101,102],$V41=[14,18,19,29,51,62,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97,100,101,102],$V51=[1,105],$V61=[1,106],$V71=[1,107],$V81=[5,10,11,12,21,22,25,26,29,30,33,34,43,44,46,47,48,49,50,57,58,62,65,66,93,98,99,110,112],$V91=[2,75],$Va1=[14,29],$Vb1=[2,65],$Vc1=[1,121],$Vd1=[1,156],$Ve1=[1,157],$Vf1=[1,158],$Vg1=[1,159],$Vh1=[1,160],$Vi1=[1,163],$Vj1=[1,173],$Vk1=[1,179],$Vl1=[1,182],$Vm1=[1,183],$Vn1=[1,184],$Vo1=[1,185],$Vp1=[14,18,29],$Vq1=[5,8,10,11,12,21,22,25,26,29,30,32,33,34,43,44,46,47,48,49,50,57,58,62,65,66,93,98,99,110,112],$Vr1=[2,19],$Vs1=[1,205],$Vt1=[14,18],$Vu1=[1,214],$Vv1=[14,18,29,51],$Vw1=[14,18,25,29,51,62],$Vx1=[2,15],$Vy1=[2,16],$Vz1=[14,18,25,26,29,51,62],$VA1=[1,221],$VB1=[2,54],$VC1=[1,253],$VD1=[1,254],$VE1=[14,18,29,51,62],$VF1=[18,26],$VG1=[10,11,12,21,22,25,29,30,33,34,43,44,46,47,48,49,50,57,58,62,93,98,99,110,112];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"decls":4,"EOF":5,"decl":6,"func_decl":7,"DOT":8,"stm_list":9,"FUNCTION":10,"NAME":11,"L_PAR":12,"params":13,"R_PAR":14,"return_type":15,"block_decl":16,"param":17,"COMMA":18,"COLON":19,"type":20,"NUMBER":21,"STRING":22,"BOOLEAN":23,"VOID":24,"L_CURLY":25,"R_CURLY":26,"stm":27,"var_decl":28,"SEMICOLON":29,"IF":30,"expr":31,"ELSE":32,"WHILE":33,"FOR":34,"arg":35,"scope":36,"OF":37,"IN":38,"object":39,"object_decl":40,"normal_stm":41,"then_stm":42,"DO":43,"SWITCH":44,"case_stm":45,"BREAK":46,"CONTINUE":47,"RETURN":48,"CONSOLE_LOG":49,"TYPE":50,"ASSIGN":51,"atr_list":52,"atr":53,"value":54,"var_element":55,"var_list":56,"LET":57,"CONST":58,"dec_type":59,"dec_assign":60,"array":61,"L_SQUARE":62,"R_SQUARE":63,"op_if":64,"CASE":65,"DEFAULT":66,"op_assign":67,"op_or":68,"QUESTION":69,"OR":70,"op_and":71,"AND":72,"op_bin_or":73,"BIN_OR":74,"op_bin_xor":75,"BIN_XOR":76,"op_bin_and":77,"BIN_AND":78,"op_equate":79,"EQUAL":80,"op_compare":81,"NOT_EQUAL":82,"LESS":83,"op_shift":84,"GREATER":85,"LESS_EQUAL":86,"GREATER_EQUAL":87,"L_SHIFT":88,"op_add":89,"R_SHIFT":90,"PLUS":91,"op_mult":92,"MINUS":93,"MULTIPLY":94,"op_unary":95,"DIVIDE":96,"REMAINDER":97,"NOT":98,"BIN_NOT":99,"INCREMENT":100,"DECREMENT":101,"POWER":102,"op_pointer":103,"string_function":104,"LENGTH":105,"CHARAT":106,"TOLOWERCASE":107,"TOUPPERCASE":108,"CONCAT":109,"DECIMAL":110,"access_list":111,"NEW":112,"ARRAY":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"DOT",10:"FUNCTION",11:"NAME",12:"L_PAR",14:"R_PAR",18:"COMMA",19:"COLON",21:"NUMBER",22:"STRING",23:"BOOLEAN",24:"VOID",25:"L_CURLY",26:"R_CURLY",29:"SEMICOLON",30:"IF",32:"ELSE",33:"WHILE",34:"FOR",37:"OF",38:"IN",43:"DO",44:"SWITCH",46:"BREAK",47:"CONTINUE",48:"RETURN",49:"CONSOLE_LOG",50:"TYPE",51:"ASSIGN",57:"LET",58:"CONST",62:"L_SQUARE",63:"R_SQUARE",65:"CASE",66:"DEFAULT",69:"QUESTION",70:"OR",72:"AND",74:"BIN_OR",76:"BIN_XOR",78:"BIN_AND",80:"EQUAL",82:"NOT_EQUAL",83:"LESS",85:"GREATER",86:"LESS_EQUAL",87:"GREATER_EQUAL",88:"L_SHIFT",90:"R_SHIFT",91:"PLUS",93:"MINUS",94:"MULTIPLY",96:"DIVIDE",97:"REMAINDER",98:"NOT",99:"BIN_NOT",100:"INCREMENT",101:"DECREMENT",102:"POWER",105:"LENGTH",106:"CHARAT",107:"TOLOWERCASE",108:"TOUPPERCASE",109:"CONCAT",110:"DECIMAL",112:"NEW",113:"ARRAY"},
productions_: [0,[3,2],[4,2],[4,0],[6,4],[6,1],[7,7],[7,6],[7,6],[7,5],[13,3],[13,1],[17,2],[17,1],[15,2],[20,1],[20,1],[20,1],[20,1],[16,3],[9,2],[9,0],[27,1],[27,2],[27,7],[27,5],[27,5],[27,9],[27,8],[27,8],[27,1],[27,1],[27,1],[42,7],[42,5],[42,5],[42,9],[42,8],[42,8],[42,1],[41,7],[41,7],[41,1],[41,2],[41,2],[41,2],[41,3],[41,2],[41,1],[41,1],[41,5],[40,7],[52,3],[52,1],[52,0],[53,3],[53,3],[53,3],[39,9],[39,7],[28,3],[36,1],[36,1],[55,3],[56,3],[56,0],[59,3],[61,3],[61,2],[61,3],[61,0],[60,2],[60,0],[35,1],[35,1],[35,0],[45,7],[45,5],[45,5],[45,3],[31,3],[31,1],[67,3],[67,1],[64,5],[64,1],[68,3],[68,1],[71,3],[71,1],[73,3],[73,1],[75,3],[75,1],[77,3],[77,1],[79,3],[79,3],[79,1],[81,3],[81,3],[81,3],[81,3],[81,1],[84,3],[84,3],[84,1],[89,3],[89,3],[89,1],[92,3],[92,3],[92,3],[92,1],[95,2],[95,2],[95,2],[95,2],[95,2],[95,3],[95,1],[103,3],[103,4],[103,1],[104,1],[104,4],[104,3],[104,3],[104,4],[54,1],[54,1],[54,3],[54,1],[54,3],[54,1],[54,4],[54,3],[54,3],[54,2],[54,3],[54,3],[54,5],[111,3],[111,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:

		this.$ = nodeCounter;


		dotData += nodeCounter+'[label=\"decls\"];';

		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;

	
break;
case 3:

		this.$ = nodeCounter;
		let dcs1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"decls\"];';
		dotData += dcs1+'[label=\"null\"];';
		dotData += nodeCounter+'->'+dcs1+';';

		nodeCounter += 2;
	
break;
case 4:

		this.$ = $$[$0-3];
	
break;
case 5:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"decl\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 6:

		this.$ = nodeCounter;
		let fd1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"func_decl\"];';
		dotData += fd1+'[label=\"'+$$[$0-5]+'\"];';
		dotData += nodeCounter+'->'+fd1+';';
		dotData += nodeCounter+'->'+$$[$0-3]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 7:

		this.$ = nodeCounter;
		let fd2 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"func_decl\"];';
		dotData += fd2+'[label=\"'+$$[$0-4]+'\"];';
		dotData += nodeCounter+'->'+fd2+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 8:

		this.$ = nodeCounter;
		let fd3 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"func_decl\"];';
		dotData += fd3+'[label=\"'+$$[$0-4]+'\"];';
		dotData += nodeCounter+'->'+fd3+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 9:

		this.$ = nodeCounter;
		let fd4 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"func_decl\"];';
		dotData += fd4+'[label=\"'+$$[$0-3]+'\"];';
		dotData += nodeCounter+'->'+fd4+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter += 2;
	
break;
case 10:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"params\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter += 1;
	
break;
case 11:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"params\"];';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter += 1;
	
break;
case 12:

		this.$ = nodeCounter;
		let prm1 = nodeCounter + 1

		dotData += nodeCounter+'[label=\"params\"];';
		dotData += prm1+'[label=\"'+$$[$0-1]+'\"];';
		dotData += nodeCounter+'->'+prm1+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter += 2;
	
break;
case 13:

		this.$ = nodeCounter;
		let prm2 = nodeCounter + 1

		dotData += nodeCounter+'[label=\"params\"];';
		dotData += prm2+'[label=\"'+$$[$0]+'\"];';
		dotData += nodeCounter+'->'+prm2+';';
		
		nodeCounter += 2;
	
break;
case 14:

		this.$ = nodeCounter;
		let rt1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"return_type\"];';
		dotData += rt1+'[label=\"'+$$[$0]+'\"];';
		dotData += nodeCounter+'->'+rt1+';';

		nodeCounter += 2;
	
break;
case 15: case 16: case 17: case 18: case 61: case 62:

		this.$ = $$[$0];
	
break;
case 19:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"block_decl\"];';

		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter += 1;
	
break;
case 20:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"stm_list\"];';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';
		
		nodeCounter += 1;
	
break;
case 21:

		this.$ = nodeCounter;
		let stms1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"stm_list\"];';
		dotData += stms1+'[label=\"null\"];';
		dotData += nodeCounter+'->'+stms1+';';

		nodeCounter += 2;
	
break;
case 22: case 31: case 32:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"stm\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 23:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"stm\"];';

		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter += 1;
	
break;
case 24:

		this.$ = nodeCounter;
		let stm1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"stm\"];';
		dotData += stm1+'[label=\"IF ELSE\"];';
		dotData += nodeCounter+'->'+stm1+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 25:

		this.$ = nodeCounter;
		let stm2 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"stm\"];';
		dotData += stm2+'[label=\"IF\"];';
		dotData += nodeCounter+'->'+stm2+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 26:

		this.$ = nodeCounter;
		let stm3 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"stm\"];';
		dotData += stm3+'[label=\"WHILE\"];';
		dotData += nodeCounter+'->'+stm3+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 27:

		this.$ = nodeCounter;
		let stm4 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"stm\"];';
		dotData += stm4+'[label=\"FOR\"];';
		dotData += nodeCounter+'->'+stm4+';';
		dotData += nodeCounter+'->'+$$[$0-6]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 28:

		this.$ = nodeCounter;
		let stm5 = nodeCounter+1;
		let stm6 = nodeCounter+2;
		let stm7 = nodeCounter+3;

		dotData += nodeCounter+'[label=\"stm\"];';
		dotData += stm5+'[label=\"FOR OF\"];';
		dotData += stm6+'[label=\"'+$$[$0-4]+'\"];';
		dotData += stm7+'[label=\"'+$$[$0-2]+'\"];';
		dotData += nodeCounter+'->'+stm5+';';
		dotData += nodeCounter+'->'+stm6+';';
		dotData += nodeCounter+'->'+stm7+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 4;
	
break;
case 29:

		this.$ = nodeCounter;
		let stm8 = nodeCounter+1;
		let stm9 = nodeCounter+2;
		let stm10 = nodeCounter+3;

		dotData += nodeCounter+'[label=\"stm\"];';
		dotData += stm8+'[label=\"FOR IN\"];';
		dotData += stm9+'[label=\"'+$$[$0-4]+'\"];';
		dotData += stm10+'[label=\"'+$$[$0-2]+'\"];';
		dotData += nodeCounter+'->'+stm8+';';
		dotData += nodeCounter+'->'+stm9+';';
		dotData += nodeCounter+'->'+stm10+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 4;
	
break;
case 30:


	
break;
case 33:

		this.$ = nodeCounter;
		let tstm1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"then_stm\"];';
		dotData += tstm1+'[label=\"IF ELSE\"];';
		dotData += nodeCounter+'->'+tstm1+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 34:

		this.$ = nodeCounter;
		let tstm2 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"then_stm\"];';
		dotData += tstm2+'[label=\"IF\"];';
		dotData += nodeCounter+'->'+tstm2+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 35:

		this.$ = nodeCounter;
		let tstm3 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"then_stm\"];';
		dotData += tstm3+'[label=\"WHILE\"];';
		dotData += nodeCounter+'->'+tstm3+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 36:

		this.$ = nodeCounter;
		let tstm4 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"then_stm\"];';
		dotData += tstm4+'[label=\"FOR\"];';
		dotData += nodeCounter+'->'+tstm4+';';
		dotData += nodeCounter+'->'+$$[$0-6]+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 37:

		this.$ = nodeCounter;
		let tstm5 = nodeCounter+1;
		let tstm6 = nodeCounter+2;
		let tstm7 = nodeCounter+3;

		dotData += nodeCounter+'[label=\"then_stm\"];';
		dotData += tstm5+'[label=\"FOR OF\"];';
		dotData += tstm6+'[label=\"'+$$[$0-4]+'\"];';
		dotData += tstm7+'[label=\"'+$$[$0-2]+'\"];';
		dotData += nodeCounter+'->'+tstm5+';';
		dotData += nodeCounter+'->'+tstm6+';';
		dotData += nodeCounter+'->'+tstm7+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 4;
	
break;
case 38:

		this.$ = nodeCounter;
		let tstm8 = nodeCounter+1;
		let tstm9 = nodeCounter+2;
		let tstm10 = nodeCounter+3;

		dotData += nodeCounter+'[label=\"then_stm\"];';
		dotData += tstm8+'[label=\"FOR IN\"];';
		dotData += tstm9+'[label=\"'+$$[$0-4]+'\"];';
		dotData += tstm10+'[label=\"'+$$[$0-2]+'\"];';
		dotData += nodeCounter+'->'+tstm8+';';
		dotData += nodeCounter+'->'+tstm9+';';
		dotData += nodeCounter+'->'+tstm10+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 4;
	
break;
case 39: case 42: case 49:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"normal_stm\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 40:

		this.$ = nodeCounter;
		let nstm1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"normal_stm\"];';
		dotData += nstm1+'[label=\"DO WHILE\"];';
		dotData += nodeCounter+'->'+nstm1+';';
		dotData += nodeCounter+'->'+$$[$0-5]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';

		nodeCounter += 2;
	
break;
case 41:

		this.$ = nodeCounter;
		let nstm3 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"normal_stm\"];';
		dotData += nstm3+'[label=\"SWITCH\"];';
		dotData += nodeCounter+'->'+nstm3+';';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter += 2;
	
break;
case 43:

		// does nothing
		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"normal_stm\"];';

		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter += 1;
	
break;
case 44:

		this.$ = nodeCounter;
		let nstm4 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"normal_stm\"];';
		dotData += nstm4+'[label=\"BREAK\"];';
		dotData += nodeCounter+'->'+nstm4+';';

		nodeCounter += 2;
	
break;
case 45:

		this.$ = nodeCounter;
		let nstm5 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"normal_stm\"];';
		dotData += nstm5+'[label=\"CONTINUE\"];';
		dotData += nodeCounter+'->'+nstm5+';';

		nodeCounter += 2;
	
break;
case 46:

		this.$ = nodeCounter;
		let nstm6 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"normal_stm\"];';
		dotData += nstm6+'[label=\"RETURN\"];';
		dotData += nodeCounter+'->'+nstm6+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter += 2;
	
break;
case 47:

		// return with no expression(2)
		this.$ = nodeCounter;
		let nstm7 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"normal_stm\"];';
		dotData += nstm7+'[label=\"RETURN\"];';
		dotData += nodeCounter+'->'+nstm7+';';

		nodeCounter += 2;
	
break;
case 48:

		// does nothing
	
break;
case 50:

		this.$ = nodeCounter;
		let nstm8 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"normal_stm\"];';
		dotData += nstm8+'[label=\"CONSOLE_LOG\"];';
		dotData += nodeCounter+'->'+nstm8+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';

		nodeCounter += 2;
	
break;
case 51:

		this.$ = nodeCounter;
		let od1 = nodeCounter+1;
		let od2 = nodeCounter+2;

		dotData += nodeCounter+'[label=\"object_decl\"];';
		dotData += od1+'[label=\"TYPE\"];';
		dotData += od2+'[label=\"'+$$[$0-5]+'\"];';
		dotData += nodeCounter+'->'+od1+';';
		dotData += nodeCounter+'->'+od2+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';

		nodeCounter += 3;
	
break;
case 52:

		this.$ = nodeCounter;
		dotData += nodeCounter+'[label=\"atr_list\"];';

		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

	
break;
case 53:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"atr_list\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 54:

		this.$ = nodeCounter;
		let atl1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"atr_list\"];';
		dotData += atl1+'[label=\"null\"];';
		dotData += nodeCounter+'->'+atl1+';';

		nodeCounter += 2;
	
break;
case 55:

		this.$ = nodeCounter;
		let atr1 = nodeCounter+1;
		let atr2 = nodeCounter+2;

		dotData += nodeCounter+'[label=\"atr\"];';
		dotData += atr1+'[label=\"'+$$[$0-2]+'\"];';
		dotData += atr2+'[label=\"'+$$[$0]+'\"];';
		dotData += nodeCounter+'->'+atr1+';';
		dotData += nodeCounter+'->'+atr2+';';

		nodeCounter += 3;
	
break;
case 56:

		this.$ = nodeCounter;
		let atr03 = nodeCounter+1;
		let atr4 = nodeCounter+2;

		dotData += nodeCounter+'[label=\"atr\"];';
		dotData += atr03+'[label=\"'+$$[$0-2]+'\"];';
		dotData += atr4+'[label=\"'+$$[$0]+'\"];';
		dotData += nodeCounter+'->'+atr03+';';
		dotData += nodeCounter+'->'+atr4+';';

		nodeCounter += 3;
	
break;
case 57: case 141:

		
	
break;
case 58: case 59: case 69:

	
break;
case 60:

		this.$ = nodeCounter;
		let atr3 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"var_decl\"];';
		dotData += atr3+'[label=\"'+$$[$0-2]+'\"];';
		dotData += nodeCounter+'->'+atr3+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 63:

		this.$ = nodeCounter;
		let ve1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"var_element\"];';
		dotData += ve1+'[label=\"'+$$[$0-2]+'\"];';
		dotData += nodeCounter+'->'+ve1+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 64:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"var_list\"];';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 65:

		this.$ = nodeCounter;
		let ve2 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"atr_list\"];';
		dotData += ve2+'[label=\"null\"];';
		dotData += nodeCounter+'->'+ve2+';';

		nodeCounter += 2;
	
break;
case 66:

		this.$ = nodeCounter;
		let dt1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"dec_type\"];';
		dotData += dt1+'[label=\"'+$$[$0-1]+'\"];';
		dotData += nodeCounter+'->'+dt1+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 67:

		this.$ = nodeCounter;
		let arr1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"array\"];';
		dotData += arr1+'[label=\"[]\"];';
		dotData += nodeCounter+'->'+arr1+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter += 2;
	
break;
case 68:

		this.$ = nodeCounter;
		let arr2 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"array\"];';
		dotData += arr2+'[label=\"[]\"];';
		dotData += nodeCounter+'->'+arr2+';';

		nodeCounter += 2;
	
break;
case 70:

		this.$ = nodeCounter;
		let arr3 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"array\"];';
		dotData += arr3+'[label=\"null\"];';
		dotData += nodeCounter+'->'+arr3+';';

		nodeCounter += 2;
	
break;
case 71:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"dec_assign\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 72:

		this.$ = nodeCounter;
		let da1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"dec_assign\"];';
		dotData += da1+'[label=\"null\"];';
		dotData += nodeCounter+'->'+da1+';';

		nodeCounter += 2;
	
break;
case 73: case 74:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"arg\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 75:

		this.$ = nodeCounter;
		let ag1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"arg\"];';
		dotData += ag1+'[label=\"null\"];';
		dotData += nodeCounter+'->'+ag1+';';

		nodeCounter += 2;
	
break;
case 76:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"case_stm\"];';
		dotData += nodeCounter+'->'+$$[$0-5]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 77:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"case_stm\"];';
		dotData += nodeCounter+'->'+$$[$0-3]+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 78:

		this.$ = nodeCounter;
		let cstm1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"case_stm\"];';
		dotData += cstm1+'[label=\"DEFAULT\"];';
		dotData += nodeCounter+'->'+$cstm1+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter += 2;
	
break;
case 79:

		this.$ = nodeCounter;
		let cstm2 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"case_stm\"];';
		dotData += cstm2+'[label=\"DEFAULT\"];';
		dotData += nodeCounter+'->'+cstm2+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 80:

		this.$ = nodeCounter;
		let exp1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"expr\"];';
		dotData += nodeCounter+'->'+exp1+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 81:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"expr\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 82:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_assign\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 83:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_assign\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 84:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_if\"];';
		dotData += nodeCounter+'->'+$$[$0-4]+';';
		dotData += nodeCounter+'->'+$$[$0-2]+';';

		nodeCounter += 1;
	
break;
case 85:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_if\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 86:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_or\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 87:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_or\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 88:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_and\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 89:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_and\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 90:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_bin_or\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 91:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_bin_or\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 92:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_bin_xor\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 93:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_bin_xor\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 94:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_bin_and\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 95:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_bin_and\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 96: case 97:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_equate\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 98:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_equate\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 99: case 100: case 101: case 102:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_compare\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 103:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_compare\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 104: case 105:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_shift\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 106:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_shift\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 107: case 108:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_add\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 109:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_add\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 110: case 111: case 112:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_mult\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 113:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_mult\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 114: case 115: case 118:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_unary\"];';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 116: case 117:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_unary\"];';
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter += 1;
	
break;
case 119:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_unary\"];';
		dotData += nodeCounter+'->'+$$[$0-2]+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 120:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_unary\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 121:

		// array . push ( op_pointer ) ;
		// array . pop ( ) ;
		// array . length ;
		// OP POINTER OK
		this.$ = null;
	
break;
case 122:

		//array access
		this.$ = nodeCounter;
		let opp1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"op_pointer\"];';
		dotData += opp1+'[label=\"op_pointer\"];';
		dotData += nodeCounter+'->'+$$[$0-3]+';';
		dotData += nodeCounter+'->'+opp1+';';

		nodeCounter += 2;
	
break;
case 123:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"op_pointer\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 124:

		this.$ = nodeCounter;
		let sf1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"string_function\"];';
		dotData += sf1+'[label=\"LENGTH\"];';
		dotData += nodeCounter+'->'+sf1+';';

		nodeCounter += 2;
	
break;
case 125:

		this.$ = nodeCounter;
		let sf2 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"string_function\"];';
		dotData += sf2+'[label=\"CHAR AT\"];';
		dotData += nodeCounter+'->'+sf2+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter += 2;
	
break;
case 126:

		this.$ = nodeCounter;
		let sf3 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"string_function\"];';
		dotData += sf3+'[label=\"TO LOWER CASE\"];';
		dotData += nodeCounter+'->'+sf3+';';

		nodeCounter += 2;
	
break;
case 127:

		this.$ = nodeCounter;
		let sf4 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"string_function\"];';
		dotData += sf4+'[label=\"TO UPPER CASE\"];';
		dotData += nodeCounter+'->'+sf4+';';

		nodeCounter += 2;
	
break;
case 128:

		this.$ = nodeCounter;
		let sf5 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"string_function\"];';
		dotData += sf5+'[label=\"CONCAT\"];';
		dotData += nodeCounter+'->'+sf5+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter += 2;
	
break;
case 129: case 130:

		this.$ = nodeCounter;

		dotData += nodeCounter+'[label=\"value\"];';

		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 1;
	
break;
case 131:

		this.$ = nodeCounter;
		let vl1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"value\"];';
		dotData += vl1+'[label=\"'+$$[$0-2]+'\"];';
		dotData += nodeCounter+'->'+vl1+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 132:

		this.$ = nodeCounter;
		let vl001 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"value\"];';
		dotData += vl001+'[label=\"'+$$[$0]+'\"];';
		dotData += nodeCounter+'->'+vl001+';';

		nodeCounter += 2;
	
break;
case 133:

		this.$ = nodeCounter;
		let vl2 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"value\"];';
		dotData += vl2+'[label=\"'+$$[$0-2]+'\"];';
		dotData += nodeCounter+'->'+vl2+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 134:

		this.$ = nodeCounter;
		let vl002 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"value\"];';
		dotData += vl002+'[label=\"'+$$[$0]+'\"];';
		dotData += nodeCounter+'->'+vl002+';';

		nodeCounter += 2;
	
break;
case 135:

		this.$ = nodeCounter;
		let vl02 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"value\"];';
		dotData += vl02+'[label=\"'+$$[$0-3]+'()\"];';
		dotData += nodeCounter+'->'+vl02+';';
		dotData += nodeCounter+'->'+$$[$0-1]+';';

		nodeCounter += 2;
	
break;
case 136:

		this.$ = nodeCounter;
		let vl3 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"value\"];';
		dotData += vl3+'[label=\"'+$$[$0-2]+'()\"];';
		dotData += nodeCounter+'->'+vl3+';';

		nodeCounter += 2;
	
break;
case 137:

		//array assignment [elements]
		this.$ = nodeCounter;
		let vl4 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"value\"];';
		dotData += vl4+'[label=\"['+$$[$0-1]+']\"];';
		dotData += nodeCounter+'->'+vl4+';';

		nodeCounter += 2;
	
break;
case 138:

		this.$ = nodeCounter;
		let vl5 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"value\"];';
		dotData += vl5+'[label=\"['+$$[$0]+']\"];';
		dotData += nodeCounter+'->'+vl5+';';

		nodeCounter += 2;
	
break;
case 139:

		this.$ = nodeCounter;
		let vl6 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"value\"];';
		dotData += vl6+'[label=\"('+$$[$0-1]+')\"];';
		dotData += nodeCounter+'->'+vl6+';';

		nodeCounter += 2;
	
break;
case 140:

		this.$ = nodeCounter;
		let vl7 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"value\"];';
		dotData += vl7+'[label=\"'+$$[$0-1]+'\"];';
		dotData += nodeCounter+'->'+vl7+';';
		dotData += nodeCounter+'->'+$$[$0]+';';

		nodeCounter += 2;
	
break;
case 142:

		this.$ = nodeCounter;
		let al2 = nodeCounter+1;
		let al3 = nodeCounter+2;

		dotData += nodeCounter+'[label=\"access_list\"];';
		dotData += al2+'[label=\"'+ $$[$0-2] +'\"];';
		dotData += al3+'[label=\"'+ $$[$0] +'\"];';
		dotData += nodeCounter+'->'+al2+';';
		dotData += nodeCounter+'->'+al3+';';

		nodeCounter += 3;
	
break;
case 143:

		this.$ = nodeCounter;
		let al1 = nodeCounter+1;

		dotData += nodeCounter+'[label=\"access_list\"];';
		dotData += al1+'[label=\"'+ $$[$0] +'\"];';
		dotData += nodeCounter+'->'+al1+';';

		nodeCounter += 2;
	
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,9:5,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,27:7,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{1:[3]},{5:[1,54]},{4:55,5:$V0,6:3,7:4,9:5,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,27:7,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},o($Vq,$Vr,{8:[1,56]}),o($Vq,[2,5]),{11:[1,57]},o([5,26,65,66],$Vs,{27:7,28:8,39:12,40:13,41:14,36:15,16:19,31:20,67:29,64:30,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,95:41,103:45,54:46,9:58,7:59,10:$V1,11:$V2,12:$V3,21:$V4,22:$V5,25:$V6,29:$V7,30:$V8,33:$V9,34:$Va,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,57:$Vi,58:$Vj,62:$Vk,93:$Vl,98:$Vm,99:$Vn,110:$Vo,112:$Vp}),{29:[1,60]},{12:[1,61]},{12:[1,62]},{12:[1,63]},o($Vt,[2,30]),o($Vt,[2,31]),o($Vt,[2,32]),{11:[1,65],55:64},{11:[1,66]},{7:59,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,27:67,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{12:[1,68]},o($Vt,[2,42]),{18:$Vu,29:[1,69]},{29:[1,71]},{29:[1,72]},{11:$V2,12:$V3,21:$V4,22:$V5,29:[1,74],31:73,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},o($Vt,[2,48]),{12:[1,75]},{11:[2,61]},{11:[2,62]},{7:59,9:76,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,26:$Vs,27:7,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},o($Vv,[2,81]),o($Vv,[2,83],{51:[1,77]}),o($Vw,[2,85],{69:[1,78],70:[1,79]}),o($Vx,[2,87],{72:$Vy}),o($Vz,[2,89],{74:$VA}),o($VB,[2,91],{76:$VC}),o($VD,[2,93],{78:$VE}),o($VF,[2,95],{80:$VG,82:$VH}),o($VI,[2,98],{83:$VJ,85:$VK,86:$VL,87:$VM}),o($VN,[2,103],{88:$VO,90:$VP}),o($VQ,[2,106],{91:$VR,93:$VS}),o($VT,[2,109],{94:$VU,96:$VV,97:$VW}),o($VX,[2,113],{100:$VY,101:$VZ,102:$V_}),{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,93:$Vl,95:100,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,93:$Vl,95:101,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,93:$Vl,95:102,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},o($V$,[2,120],{8:$V01,62:$V11}),o($V21,[2,123]),o($V21,[2,129]),o($V31,[2,130]),o($V41,[2,132],{8:$V51}),o($V41,[2,134],{8:$V61,12:$V71}),{11:$V2,12:$V3,21:$V4,22:$V5,31:108,54:46,62:$Vk,63:[1,109],64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,31:110,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{113:[1,111]},{1:[2,1]},{5:[2,2]},{8:[1,112]},{12:[1,113]},o($V81,[2,20]),o($Vt,$Vr),o($Vt,[2,23]),{11:$V2,12:$V3,21:$V4,22:$V5,31:114,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,31:115,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,28:118,29:$V91,31:119,35:116,36:117,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},o($Va1,$Vb1,{56:120,18:$Vc1}),{19:[1,122],51:[1,123],59:124},{51:[1,125]},{33:[1,126]},{11:$V2,12:$V3,21:$V4,22:$V5,31:127,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},o($Vt,[2,43]),{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,64:30,67:128,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},o($Vt,[2,44]),o($Vt,[2,45]),{18:$Vu,29:[1,129]},o($Vt,[2,47]),{11:$V2,12:$V3,21:$V4,22:$V5,31:130,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{26:[1,131]},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,64:30,67:132,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,64:133,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,71:134,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,73:135,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,75:136,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,77:137,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,79:138,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,81:139,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,81:140,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,84:141,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,84:142,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,84:143,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,84:144,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,89:145,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,89:146,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,92:147,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,92:148,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,93:$Vl,95:149,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,93:$Vl,95:150,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,93:$Vl,95:151,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},o($V$,[2,116]),o($V$,[2,117]),{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,103:152,110:$Vo,112:$Vp},o($VX,[2,114],{100:$VY,101:$VZ,102:$V_}),o($VX,[2,115],{100:$VY,101:$VZ,102:$V_}),o($VX,[2,118],{100:$VY,101:$VZ,102:$V_}),{11:$V2,12:$V3,21:$V4,22:$V5,54:153,62:$Vk,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,31:154,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{104:155,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1},{11:$Vi1,104:161,105:$Vd1,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1,111:162},{11:$V2,12:$V3,14:[1,165],21:$V4,22:$V5,31:164,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{18:$Vu,63:[1,166]},o($V31,[2,138]),{14:[1,167],18:$Vu},{12:[1,168]},{8:[1,169]},{11:$Vj1,13:170,14:[1,171],17:172},{14:[1,174],18:$Vu},{14:[1,175],18:$Vu},{29:[1,176]},{11:[1,177],55:64},o($Va1,[2,73]),o($Va1,[2,74],{18:$Vu}),o($Va1,[2,60]),{11:$Vk1,55:178},{11:[1,180],20:181,21:$Vl1,22:$Vm1,23:$Vn1,24:$Vo1},{25:[1,186]},o($Vp1,[2,72],{60:187,51:[1,188]}),{25:[1,189]},{12:[1,190]},{14:[1,191],18:$Vu},o($Vv,[2,80]),o($Vt,[2,46]),{14:[1,192],18:$Vu},o($Vq1,$Vr1),o($Vv,[2,82]),{19:[1,193]},o($Vx,[2,86],{72:$Vy}),o($Vz,[2,88],{74:$VA}),o($VB,[2,90],{76:$VC}),o($VD,[2,92],{78:$VE}),o($VF,[2,94],{80:$VG,82:$VH}),o($VI,[2,96],{83:$VJ,85:$VK,86:$VL,87:$VM}),o($VI,[2,97],{83:$VJ,85:$VK,86:$VL,87:$VM}),o($VN,[2,99],{88:$VO,90:$VP}),o($VN,[2,100],{88:$VO,90:$VP}),o($VN,[2,101],{88:$VO,90:$VP}),o($VN,[2,102],{88:$VO,90:$VP}),o($VQ,[2,104],{91:$VR,93:$VS}),o($VQ,[2,105],{91:$VR,93:$VS}),o($VT,[2,107],{94:$VU,96:$VV,97:$VW}),o($VT,[2,108],{94:$VU,96:$VV,97:$VW}),o($VX,[2,110],{100:$VY,101:$VZ,102:$V_}),o($VX,[2,111],{100:$VY,101:$VZ,102:$V_}),o($VX,[2,112],{100:$VY,101:$VZ,102:$V_}),o($V$,[2,119],{8:$V01,62:$V11}),o($V21,[2,121]),{18:$Vu,63:[1,194]},o($V31,[2,131]),o($V31,[2,124]),{12:[1,195]},{12:[1,196]},{12:[1,197]},{12:[1,198]},o($V31,[2,133]),o($V31,[2,140]),o([14,18,19,26,29,51,62,63,69,70,72,74,76,78,80,82,83,85,86,87,88,90,91,93,94,96,97,100,101,102],[2,143],{8:[1,199]}),{14:[1,200],18:$Vu},o($V31,[2,136]),o($V31,[2,137]),o($V31,[2,139]),{11:$V2,12:$V3,21:$V4,22:$V5,31:201,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},o($Vq,[2,4]),{14:[1,202]},{15:203,16:204,19:$Vs1,25:$V6},{14:[2,11],18:[1,206]},o($Vt1,[2,13],{15:207,19:$Vs1}),{7:59,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,27:208,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{7:59,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,27:209,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,28:118,29:$V91,31:119,35:210,36:211,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{19:$Vu1,37:[1,212],38:[1,213],59:124},o($Va1,$Vb1,{56:215,18:$Vc1}),{19:$Vu1,59:124},{51:[1,216]},o($Vv1,[2,70],{61:217,62:[1,218]}),o($Vw1,$Vx1),o($Vw1,$Vy1),o($Vz1,[2,17]),o($Vz1,[2,18]),{11:$VA1,26:$VB1,52:219,53:220},o($Vp1,[2,63]),{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,64:222,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$VA1,26:$VB1,52:223,53:220},{11:$V2,12:$V3,21:$V4,22:$V5,31:224,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{25:[1,225]},{29:[1,226]},{11:$V2,12:$V3,21:$V4,22:$V5,54:46,62:$Vk,64:227,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},o($V21,[2,122]),{11:$V2,12:$V3,21:$V4,22:$V5,31:228,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{14:[1,229]},{14:[1,230]},{11:$V2,12:$V3,21:$V4,22:$V5,31:231,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$Vi1,111:232},o($V31,[2,135]),{14:[1,233],18:$Vu},{15:234,16:235,19:$Vs1,25:$V6},{16:236,25:$V6},o($Vq1,[2,9]),{20:237,21:$Vl1,22:$Vm1,23:$Vn1,24:$Vo1},{11:$Vj1,13:238,17:172},o($Vt1,[2,12]),o($V81,[2,25],{32:[1,239]}),o($Vt,[2,26]),{29:[1,240]},{11:$Vk1,55:64},{11:$V2,12:$V3,21:$V4,22:$V5,31:241,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,21:$V4,22:$V5,31:242,54:46,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{20:181,21:$Vl1,22:$Vm1,23:$Vn1,24:$Vo1},o($Va1,[2,64]),{25:[1,243]},o($Vv1,[2,66],{62:[1,244]}),{11:$V2,12:$V3,21:$V4,22:$V5,31:245,54:46,62:$Vk,63:[1,246],64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{26:[1,247]},{18:[1,248],26:[2,53]},{19:[1,249]},o($Vp1,[2,71]),{26:[1,250]},{14:[1,251],18:$Vu},{45:252,65:$VC1,66:$VD1},o($Vt,[2,50]),o($Vw,[2,84]),{14:[1,255],18:$Vu},o($V31,[2,126]),o($V31,[2,127]),{14:[1,256],18:$Vu},o($V31,[2,142]),o($V31,[2,141]),{16:257,25:$V6},o($Vq1,[2,7]),o($Vq1,[2,8]),o([14,18,25],[2,14]),{14:[2,10]},{7:59,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,27:258,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{11:$V2,12:$V3,14:$V91,21:$V4,22:$V5,28:118,31:119,35:259,36:211,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{14:[1,260],18:$Vu},{14:[1,261],18:$Vu},{11:$VA1,26:$VB1,52:262,53:220},{63:[1,263]},{18:$Vu,63:[1,264]},o($VE1,[2,68]),{29:[1,265]},{11:$VA1,26:$VB1,52:266,53:220},{11:[1,267],12:$V3,20:268,21:[1,270],22:[1,271],23:$Vn1,24:$Vo1,54:269,62:$Vk,110:$Vo,112:$Vp},{29:[1,272]},{29:[1,273]},{26:[1,274]},{11:$V2,12:$V3,21:$V4,22:$V5,54:275,62:$Vk,110:$Vo,112:$Vp},{19:[1,276]},o($V31,[2,125]),o($V31,[2,128]),o($Vq1,[2,6]),o($Vt,[2,24]),{14:[1,277]},{7:59,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,27:278,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{7:59,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,27:279,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{26:[1,280]},o($VE1,[2,69]),o($VE1,[2,67]),o($Vt,[2,59]),{26:[2,52]},o($VF1,[2,55],{8:$V61,12:$V71}),o($VF1,[2,56]),o($VF1,[2,57]),o($VF1,$Vx1),o($VF1,$Vy1,{8:$V51}),o($Vt,[2,51]),o($Vt,[2,40]),o($Vt,[2,41]),{19:[1,281]},{7:59,9:283,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:[1,282],26:$Vs,27:7,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{7:59,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,27:284,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},o($Vt,[2,28]),o($Vt,[2,29]),{29:[1,285]},o([65,66],$Vs,{27:7,28:8,39:12,40:13,41:14,36:15,16:19,31:20,67:29,64:30,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,95:41,103:45,54:46,7:59,9:287,10:$V1,11:$V2,12:$V3,21:$V4,22:$V5,25:[1,286],29:$V7,30:$V8,33:$V9,34:$Va,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,57:$Vi,58:$Vj,62:$Vk,93:$Vl,98:$Vm,99:$Vn,110:$Vo,112:$Vp}),{7:59,9:288,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,26:$Vs,27:7,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{26:[2,79]},o($Vt,[2,27]),o($Vt,[2,58]),{7:59,9:289,10:$V1,11:$V2,12:$V3,16:19,21:$V4,22:$V5,25:$V6,26:$Vs,27:7,28:8,29:$V7,30:$V8,31:20,33:$V9,34:$Va,36:15,39:12,40:13,41:14,43:$Vb,44:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,54:46,57:$Vi,58:$Vj,62:$Vk,64:30,67:29,68:31,71:32,73:33,75:34,77:35,79:36,81:37,84:38,89:39,92:40,93:$Vl,95:41,98:$Vm,99:$Vn,103:45,110:$Vo,112:$Vp},{45:290,65:$VC1,66:$VD1},{26:[1,291]},{26:[1,292]},{26:[2,77]},o($VG1,$Vr1,{26:[2,78]}),o($VG1,$Vr1,{45:293,65:$VC1,66:$VD1}),{26:[2,76]}],
defaultActions: {26:[2,61],27:[2,62],54:[2,1],55:[2,2],238:[2,10],266:[2,52],283:[2,79],290:[2,77],293:[2,76]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	//MODELS
	var Function = function(returnType, id, parameters, statements)
	{
		this.model = "Function";
		this.returnType = returnType;
		this.id = id;
		this.parameters = parameters;
		this.statements = statements;
	};

	var Declaration = function(scope, idList)
	{
		this.model = "Declaration";
		this.scope = scope;
		this.idList = idList;
	};

	var If = function(condition, statements)
	{
		this.model = "If";
		this.condition = condition;
		this.statements = statements;
	};

	var IfElse = function(condition, statementsTrue, statementsFalse)
	{
		this.model = "IfElse";
		this.condition = condition;
		this.statementsTrue = statementsTrue;
		this.statementsFalse = statementsFalse;
	};

	var While = function(condition, statements)
	{
		this.model = "While";
		this.condition = condition;
		this.statements = statements;
	};

	var DoWhile = function(condition, statements)
	{
		this.model = "DoWhile";
		this.condition = condition;
		this.statements = statements;
	};

	var For = function(arg1, arg2, arg3, statements)
	{
		this.model = "For";
		this.arg1 = arg1;
		this.arg2 = arg2;
		this.arg3 = arg3;
		this.statements = statements;
	};

	var ForOf = function(id, list, statements)
	{
		this.model = 'ForOf';
		this.id = id;
		this.list = list;
		this.statements = statements;
	};

	var ForIn = function(id, list, statements)
	{
		this.model = 'ForIn';
		this.id = id;
		this.list = list;
		this.statements = statements;
	};
 
	var Case = function(value, statements)
	{
		this.model = "Case";
		this.value = value;
		this.statements = statements;
	};

	var Switch = function(condition, cases)
	{
		this.model = "Switch";
		this.condition = condition;
		this.cases = cases;
	};

	var Return = function(value)
	{
		this.model = "Return";
		this.value = value;
	};

	var Break = function()
	{
		this.model = "Break"
	};

	var Continue = function()
	{
		this.model = "Continue"
	};

	var GraficarTS = function()
	{
		this.model = "GraficarTS";
	};

	var ConsoleLog = function(param)
	{
		this.model = "ConsoleLog";
		this.param = param;
	};

	var PreOperation = function(value, operator)
	{
		this.model = "PreOperation";
		this.operator = operator;
		this.value = value;
	};

	var Power = function(value1, value2)
	{
		this.model = "Power";
		this.value1 = value1;
		this.value2 = value2;
	};

	var  UnaryOperation = function(value, operator)
	{
		this.model = "UnaryOperation";
		this.value = value;
		this.operator = operator;
	};

	var ArithmeticOperation = function(value1, value2, operator)
	{
		this.model = "ArithmeticOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var ShiftOperation = function(value1, value2, operator)
	{
		this.model = "ShiftOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var RelationalOperation = function(value1, value2, operator)
	{
		this.model ="RelationalOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var LogicalOperation = function(value1, value2, operator)
	{
		this.model ="LogicalOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var BitwiseOperation = function(value1, value2, operator)
	{
		this.model ="BitwiseOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var TernaryOperation = function(value1, value2, value3)
	{
		this.model ="TernaryOperation";
		this.value1 = value1;
		this.value2 = value2;
		this.value3 = value3;
	};
	
	var AssignOperation = function(value1, value2, operator)
	{
		this.model ='AssignOperation';
		this.value1 = value1;
		this.value2 = value2;
		this.operator = operator;
	};

	var Expression = function(exp)
	{
		this.model = 'Expression';
		this.expression = exp;
	}

	var Variable = function(id)
	{
		this.model = 'Variable';
		this.id = id;
	};

	var Number = function(value)
	{
		this.model = 'Number';
		this.value = value;
	};

	var String = function(value)
	{
		this.model = 'String';
		this.value = value;
	};

	var Boolean = function(value)
	{
		this.model = 'Boolean';
		this.value = value;
	};

	var Call = function(id, parameters)
	{
		this.model = 'Call';
		this.id = id;
		this.parameters = parameters;
	};

	var Push = function(arr, expression)
	{
		this.model = 'Push';
		this.value1 = arr;
		this.value2 = expression;
	};

	var Pop = function(value)
	{
		this.model = 'Pop';
		this.value = value;
	};

	var Length = function(value)
	{
		this.model = 'Length';
		this.value = value;
	};

	var ArrayAssignment = function(expr)
	{
		this.model = 'ArrayAssignment';
		this.value = expr;
	};

	var StringLength = function(str, type)
	{
		this.model = 'StringLength',
		this.value = str;
		this.type = type;
	}

	var StringCharAt = function(str, type, index)
	{
		this.model = 'StringCharAt',
		this.value = str;
		this.type = type;
		this.index = index;
	}

	var StringToLower = function(str, type)
	{
		this.model = 'StringToLower',
		this.value = str;
		this.type = type;
	}

	var StringToUpper = function(str, type)
	{
		this.model = 'StringToUpper',
		this.value = str;
		this.type = type;
	}

	var StringConcat = function(str1, str2, type)
	{
		this.model = 'StringConcat',
		this.value1 = str1;
		this.value2 = str2;
		this.type = type;
	}

	var AccessList = function(arr)
	{
		this.model = 'AccessList';
		this.list = arr;
	}

	var ObjectDeclaration = function(id, atr)
	{
		this.model = 'ObjectDeclaration';
		this.attributes = atr;
	}

	// FUNCTIONS

	function create_function(returnType, id, params, stms)
	{
		let f = new Function(returnType, id, params, stms);
		return f;
	}
	
	function create_declaration(scp, idList)
	{
		let d = new Declaration(scp, idList);
		return d;
	}

	function create_if(cond, stms)
	{
		let i = new If(cond, stms);
		return i;
	}

	function create_ifelse(cond, stms_true, stms_false)
	{
		let ie = new IfElse(cond, stms_true, stms_false);
		return ie;
	}

	function create_while(cond, stms)
	{
		let w = new While(cond, stms);
		return w;
	}

	function create_dowhile(cond, stms)
	{
		let dw = new DoWhile(cond, stms);
		return dw;
	}

	function create_for(arg1, arg2, arg3, stms)
	{
		let f = new For(arg1, arg2, arg3, stms);
		return f;
	}

	function create_forof(id, list, stms)
	{
		let f = new ForOf(id, list, stms);
		return f;
	}

	function create_forin(id, list, stms)
	{
		let f = new ForIn(id, list, stms);
		return f;
	}

	function create_case(val, stms)
	{
		let c = new Case(val, stms);
		return c;
	}

	function create_switch(cond, css)
	{
		let s = new Switch(cond, css);
		return s;
	}

	function create_return(val)
	{
		let r = new Return(val);
		return r;
	}

	function create_break()
	{
		let b = new Break();
		return b;
	}

	function create_continue()
	{
		let c = new Continue();
		return c;
	}

	function create_graficarTS()
	{
		let g = new GraficarTS();
		return g;
	}

	function create_consolelog(p)
	{
		let c = new ConsoleLog(p);
		return c;
	}

	function create_push(arr, exp)
	{
		let p = new Push(arr, exp);
		return p;
	}

	function create_pop(arr)
	{
		let p = new Pop(arr);
		return p;
	}
	
	function create_length(arr)
	{
		let l = new Length(arr);
		return l;
	}

	function create_arrayassignment(arr)
	{
		let a = new ArrayAssignment(arr);
		return a;
	}

	function create_preoperation(val, op)
	{
		let a = new PreOperation(val, op);
		return a;
	}
	function create_power(val1, val2)
	{
		let p = new Power(val1, val2);
		return p;
	}
	function create_unaryoperation(val, op)
	{
		let u = new UnaryOperation(val, op);
		return u;
	}
	function create_arithmeticoperation(val1, val2, op)
	{
		let a = new ArithmeticOperation(val1, val2, op);
		return a;
	}
	function create_shiftoperation(val1, val2, op)
	{
		let s = new ShiftOperation(val1, val2, op);
		return s;
	}
	function create_relationaloperation(val1, val2, op)
	{
		let r = new RelationalOperation(val1, val2, op);
		return r;
	}
	function create_logicaloperation(val1, val2, op)
	{
		let l = new LogicalOperation(val1, val2, op);
		return l;
	}
	function create_bitwiseoperation(val1, val2, op)
	{
		let b = new BitwiseOperation(val1, val2, op);
		return b;
	}
	function create_ternaryoperation(val1, val2, val3)
	{
		let t = new TernaryOperation(val1, val2, val3);
		return t;
	}
	function create_assignoperation(val1, val2, op)
	{
		let a = new AssignOperation(val1, val2, op);
		return a;
	}

	function create_expression_element(exp)
	{
		let e = new Expression(exp);
		return e;
	}

	function create_number(value)
	{
		let n = new Number(value);
		return n;
	}

	function create_string(value)
	{
		let s = new String(value);
		return s;
	}

	function create_variable(id)
	{
		let v = new Variable(id);
		return v;
	}

	function create_call(id, params)
	{
		let c = new Call(id, params);
		return c;
	}

	function create_boolean(val)
	{
		let b = new Boolean(val);
		return b;
	}

	function create_stringlength(str, type)
	{
		let s = new StringLength(str, type);
		return s;
	}

	function create_stringcharat(str, type, index)
	{
		let s = new StringCharAt(str, type, index);
		return s;
	}

	function create_stringtolower(str, type)
	{
		let s = new StringToLower(str, type);
		return s;
	}

	function create_stringtoupper(str, type)
	{
		let s = new StringToUpper(str, type);
		return s;
	}

	function create_stringconcat(str1, str2, type)
	{
		let s = new StringConcat(str1, str2, type);
		return s;
	}

	function create_accesslist(arr)
	{
		let l = new AccessList(arr);
		return l;
	}

	function create_objectdeclaration(id, atrs)
	{
		let o = new ObjectDeclaration(id, atrs);
		return o;
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 29;
break;
case 4:return 18;
break;
case 5:return 19;
break;
case 6:return 8;
break;
case 7:return 12;
break;
case 8:return 14;
break;
case 9:return 62;
break;
case 10:return 63;
break;
case 11:return 25;
break;
case 12:return 26;
break;
case 13:return 100;
break;
case 14:return 101;
break;
case 15:return 102;
break;
case 16:return 91;
break;
case 17:return 93;
break;
case 18:return 94;
break;
case 19:return 96;
break;
case 20:return 97;
break;
case 21:return 90;
break;
case 22:return 88;
break;
case 23:return 86;
break;
case 24:return 87;
break;
case 25:return 83;
break;
case 26:return 85;
break;
case 27:return 82;
break;
case 28:return 72;
break;
case 29:return 70;
break;
case 30:return 98;
break;
case 31:return 78;
break;
case 32:return 74;
break;
case 33:return 99;
break;
case 34:return 76;
break;
case 35:return 30;
break;
case 36:return 32;
break;
case 37:return 44;
break;
case 38:return 65;
break;
case 39:return 66;
break;
case 40:return 46;
break;
case 41:return 47;
break;
case 42:return 48;
break;
case 43:return 33;
break;
case 44:return 43;
break;
case 45:return 34;
break;
case 46:return 38;
break;
case 47:return 37;
break;
case 48:return 49;
break;
case 49:return 69;
break;
case 50:return 80;
break;
case 51:return 51;
break;
case 52:return 21;
break;
case 53:return 22;
break;
case 54:return 23;
break;
case 55:return 24;
break;
case 56:return 105;
break;
case 57:return 57;
break;
case 58:return 58;
break;
case 59:return 10;
break;
case 60:return 106;
break;
case 61:return 107;
break;
case 62:return 108;
break;
case 63:return 109;
break;
case 64:return 112;
break;
case 65:return 113;
break;
case 66:return 50;
break;
case 67:return 110;
break;
case 68:return 'INTEGER';
break;
case 69:return 22;
break;
case 70:return	'NAME';
break;
case 71:return 5;
break;
case 72:
							lexicalErrors.push(new Error('Error lexico en el token: '+ yy_.yytext+'.', yy_.yylloc.first_line, yy_.yylloc.first_column));
						
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:~)/i,/^(?:\^)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:console\.log\b)/i,/^(?:\?)/i,/^(?:==)/i,/^(?:=)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:function\b)/i,/^(?:charat\b)/i,/^(?:tolowercase\b)/i,/^(?:touppercase\b)/i,/^(?:concat\b)/i,/^(?:new\b)/i,/^(?:array\b)/i,/^(?:type\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:((").*?("))|((').*?(')))/i,/^(?:[a-zA-Z_][a-aA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ast;
exports.Parser = ast.Parser;
exports.parse = function () { return ast.parse.apply(ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}